# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Actor {
  _count: ActorCount
  actor_id: Int!
  film_actor(cursor: Film_actorWhereUniqueInput, distinct: [Film_actorScalarFieldEnum!], orderBy: [Film_actorOrderByWithRelationInput!], skip: Int, take: Int, where: Film_actorWhereInput): [Film_actor!]!
  first_name: String!
  last_name: String!
  last_update: DateTimeISO!
}

type ActorCount {
  film_actor(where: Film_actorWhereInput): Int!
}

input ActorOrderByWithRelationInput {
  actor_id: SortOrder
  film_actor: Film_actorOrderByRelationAggregateInput
  first_name: SortOrder
  last_name: SortOrder
  last_update: SortOrder
}

input ActorRelationFilter {
  is: ActorWhereInput
  isNot: ActorWhereInput
}

enum ActorScalarFieldEnum {
  actor_id
  first_name
  last_name
  last_update
}

input ActorWhereInput {
  AND: [ActorWhereInput!]
  NOT: [ActorWhereInput!]
  OR: [ActorWhereInput!]
  actor_id: IntFilter
  film_actor: Film_actorListRelationFilter
  first_name: StringFilter
  last_name: StringFilter
  last_update: DateTimeFilter
}

input ActorWhereUniqueInput {
  AND: [ActorWhereInput!]
  NOT: [ActorWhereInput!]
  OR: [ActorWhereInput!]
  actor_id: Int
  film_actor: Film_actorListRelationFilter
  first_name: StringFilter
  last_name: StringFilter
  last_update: DateTimeFilter
}

input AddressListRelationFilter {
  every: AddressWhereInput
  none: AddressWhereInput
  some: AddressWhereInput
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  address: StringFilter
  address2: StringNullableFilter
  address_id: IntFilter
  city: CityRelationFilter
  city_id: IntFilter
  customer: CustomerListRelationFilter
  district: StringFilter
  last_update: DateTimeFilter
  phone: StringFilter
  postal_code: StringNullableFilter
  staff: StaffListRelationFilter
  store: StoreListRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Byte

input BytesNullableFilter {
  equals: Byte
  in: [Byte!]
  not: NestedBytesNullableFilter
  notIn: [Byte!]
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  category_id: IntFilter
  film_category: Film_categoryListRelationFilter
  last_update: DateTimeFilter
  name: StringFilter
}

input CityListRelationFilter {
  every: CityWhereInput
  none: CityWhereInput
  some: CityWhereInput
}

input CityRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

input CityWhereInput {
  AND: [CityWhereInput!]
  NOT: [CityWhereInput!]
  OR: [CityWhereInput!]
  address: AddressListRelationFilter
  city: StringFilter
  city_id: IntFilter
  country: CountryRelationFilter
  country_id: IntFilter
  last_update: DateTimeFilter
}

input CountryRelationFilter {
  is: CountryWhereInput
  isNot: CountryWhereInput
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  city: CityListRelationFilter
  country: StringFilter
  country_id: IntFilter
  last_update: DateTimeFilter
}

input CustomerListRelationFilter {
  every: CustomerWhereInput
  none: CustomerWhereInput
  some: CustomerWhereInput
}

input CustomerRelationFilter {
  is: CustomerWhereInput
  isNot: CustomerWhereInput
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  active: BoolFilter
  address: AddressRelationFilter
  address_id: IntFilter
  create_date: DateTimeFilter
  customer_id: IntFilter
  email: StringNullableFilter
  first_name: StringFilter
  last_name: StringFilter
  last_update: DateTimeNullableFilter
  payment: PaymentListRelationFilter
  rental: RentalListRelationFilter
  store: StoreRelationFilter
  store_id: IntFilter
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

"""
GraphQL Scalar representing the Prisma.Decimal type, based on Decimal.js library.
"""
scalar Decimal

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input Enumfilm_ratingNullableFilter {
  equals: film_rating
  in: [film_rating!]
  not: NestedEnumfilm_ratingNullableFilter
  notIn: [film_rating!]
}

type Film {
  _count: FilmCount
  description: String
  film_id: Int!
  language_id: Int!
  last_update: DateTimeISO!
  length: Int
  original_language_id: Int
  rating: film_rating
  release_year: Int
  rental_duration: Int!
  rental_rate: Decimal!
  replacement_cost: Decimal!
  special_features: String
  title: String!
}

type FilmCount {
  film_actor(where: Film_actorWhereInput): Int!
  film_category(where: Film_categoryWhereInput): Int!
  inventory(where: InventoryWhereInput): Int!
}

input FilmListRelationFilter {
  every: FilmWhereInput
  none: FilmWhereInput
  some: FilmWhereInput
}

input FilmOrderByRelationAggregateInput {
  _count: SortOrder
}

input FilmOrderByWithRelationInput {
  description: SortOrderInput
  film_actor: Film_actorOrderByRelationAggregateInput
  film_category: Film_categoryOrderByRelationAggregateInput
  film_id: SortOrder
  inventory: InventoryOrderByRelationAggregateInput
  language_film_language_idTolanguage: LanguageOrderByWithRelationInput
  language_film_original_language_idTolanguage: LanguageOrderByWithRelationInput
  language_id: SortOrder
  last_update: SortOrder
  length: SortOrderInput
  original_language_id: SortOrderInput
  rating: SortOrderInput
  release_year: SortOrderInput
  rental_duration: SortOrder
  rental_rate: SortOrder
  replacement_cost: SortOrder
  special_features: SortOrderInput
  title: SortOrder
}

input FilmRelationFilter {
  is: FilmWhereInput
  isNot: FilmWhereInput
}

input FilmWhereInput {
  AND: [FilmWhereInput!]
  NOT: [FilmWhereInput!]
  OR: [FilmWhereInput!]
  description: StringNullableFilter
  film_actor: Film_actorListRelationFilter
  film_category: Film_categoryListRelationFilter
  film_id: IntFilter
  inventory: InventoryListRelationFilter
  language_film_language_idTolanguage: LanguageRelationFilter
  language_film_original_language_idTolanguage: LanguageNullableRelationFilter
  language_id: IntFilter
  last_update: DateTimeFilter
  length: IntNullableFilter
  original_language_id: IntNullableFilter
  rating: Enumfilm_ratingNullableFilter
  release_year: IntNullableFilter
  rental_duration: IntFilter
  rental_rate: DecimalFilter
  replacement_cost: DecimalFilter
  special_features: StringNullableFilter
  title: StringFilter
}

input FilmWhereUniqueInput {
  AND: [FilmWhereInput!]
  NOT: [FilmWhereInput!]
  OR: [FilmWhereInput!]
  description: StringNullableFilter
  film_actor: Film_actorListRelationFilter
  film_category: Film_categoryListRelationFilter
  film_id: Int
  inventory: InventoryListRelationFilter
  language_film_language_idTolanguage: LanguageRelationFilter
  language_film_original_language_idTolanguage: LanguageNullableRelationFilter
  language_id: IntFilter
  last_update: DateTimeFilter
  length: IntNullableFilter
  original_language_id: IntNullableFilter
  rating: Enumfilm_ratingNullableFilter
  release_year: IntNullableFilter
  rental_duration: IntFilter
  rental_rate: DecimalFilter
  replacement_cost: DecimalFilter
  special_features: StringNullableFilter
  title: StringFilter
}

type Film_actor {
  actor_id: Int!
  film_id: Int!
  last_update: DateTimeISO!
}

input Film_actorListRelationFilter {
  every: Film_actorWhereInput
  none: Film_actorWhereInput
  some: Film_actorWhereInput
}

input Film_actorOrderByRelationAggregateInput {
  _count: SortOrder
}

input Film_actorOrderByWithRelationInput {
  actor: ActorOrderByWithRelationInput
  actor_id: SortOrder
  film: FilmOrderByWithRelationInput
  film_id: SortOrder
  last_update: SortOrder
}

enum Film_actorScalarFieldEnum {
  actor_id
  film_id
  last_update
}

input Film_actorWhereInput {
  AND: [Film_actorWhereInput!]
  NOT: [Film_actorWhereInput!]
  OR: [Film_actorWhereInput!]
  actor: ActorRelationFilter
  actor_id: IntFilter
  film: FilmRelationFilter
  film_id: IntFilter
  last_update: DateTimeFilter
}

input Film_actorWhereUniqueInput {
  AND: [Film_actorWhereInput!]
  NOT: [Film_actorWhereInput!]
  OR: [Film_actorWhereInput!]
  actor: ActorRelationFilter
  actor_id: IntFilter
  actor_id_film_id: film_actorActor_idFilm_idCompoundUniqueInput
  film: FilmRelationFilter
  film_id: IntFilter
  last_update: DateTimeFilter
}

input Film_categoryListRelationFilter {
  every: Film_categoryWhereInput
  none: Film_categoryWhereInput
  some: Film_categoryWhereInput
}

input Film_categoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input Film_categoryWhereInput {
  AND: [Film_categoryWhereInput!]
  NOT: [Film_categoryWhereInput!]
  OR: [Film_categoryWhereInput!]
  category: CategoryRelationFilter
  category_id: IntFilter
  film: FilmRelationFilter
  film_id: IntFilter
  last_update: DateTimeFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input InventoryListRelationFilter {
  every: InventoryWhereInput
  none: InventoryWhereInput
  some: InventoryWhereInput
}

input InventoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input InventoryRelationFilter {
  is: InventoryWhereInput
  isNot: InventoryWhereInput
}

input InventoryWhereInput {
  AND: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  film: FilmRelationFilter
  film_id: IntFilter
  inventory_id: IntFilter
  last_update: DateTimeFilter
  rental: RentalListRelationFilter
  store: StoreRelationFilter
  store_id: IntFilter
}

input LanguageNullableRelationFilter {
  is: LanguageWhereInput
  isNot: LanguageWhereInput
}

input LanguageOrderByWithRelationInput {
  film_film_language_idTolanguage: FilmOrderByRelationAggregateInput
  film_film_original_language_idTolanguage: FilmOrderByRelationAggregateInput
  language_id: SortOrder
  last_update: SortOrder
  name: SortOrder
}

input LanguageRelationFilter {
  is: LanguageWhereInput
  isNot: LanguageWhereInput
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  film_film_language_idTolanguage: FilmListRelationFilter
  film_film_original_language_idTolanguage: FilmListRelationFilter
  language_id: IntFilter
  last_update: DateTimeFilter
  name: StringFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBytesNullableFilter {
  equals: Byte
  in: [Byte!]
  not: NestedBytesNullableFilter
  notIn: [Byte!]
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedEnumfilm_ratingNullableFilter {
  equals: film_rating
  in: [film_rating!]
  not: NestedEnumfilm_ratingNullableFilter
  notIn: [film_rating!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

enum NullsOrder {
  first
  last
}

input PaymentListRelationFilter {
  every: PaymentWhereInput
  none: PaymentWhereInput
  some: PaymentWhereInput
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  amount: DecimalFilter
  customer: CustomerRelationFilter
  customer_id: IntFilter
  last_update: DateTimeNullableFilter
  payment_date: DateTimeFilter
  payment_id: IntFilter
  rental: RentalNullableRelationFilter
  rental_id: IntNullableFilter
  staff: StaffRelationFilter
  staff_id: IntFilter
}

type Query {
  actors(cursor: ActorWhereUniqueInput, distinct: [ActorScalarFieldEnum!], orderBy: [ActorOrderByWithRelationInput!], skip: Int, take: Int, where: ActorWhereInput): [Actor!]!
  getFilm(where: FilmWhereUniqueInput!): Film
}

input RentalListRelationFilter {
  every: RentalWhereInput
  none: RentalWhereInput
  some: RentalWhereInput
}

input RentalNullableRelationFilter {
  is: RentalWhereInput
  isNot: RentalWhereInput
}

input RentalWhereInput {
  AND: [RentalWhereInput!]
  NOT: [RentalWhereInput!]
  OR: [RentalWhereInput!]
  customer: CustomerRelationFilter
  customer_id: IntFilter
  inventory: InventoryRelationFilter
  inventory_id: IntFilter
  last_update: DateTimeFilter
  payment: PaymentListRelationFilter
  rental_date: DateTimeFilter
  rental_id: IntFilter
  return_date: DateTimeNullableFilter
  staff: StaffRelationFilter
  staff_id: IntFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StaffListRelationFilter {
  every: StaffWhereInput
  none: StaffWhereInput
  some: StaffWhereInput
}

input StaffRelationFilter {
  is: StaffWhereInput
  isNot: StaffWhereInput
}

input StaffWhereInput {
  AND: [StaffWhereInput!]
  NOT: [StaffWhereInput!]
  OR: [StaffWhereInput!]
  active: BoolFilter
  address: AddressRelationFilter
  address_id: IntFilter
  email: StringNullableFilter
  first_name: StringFilter
  last_name: StringFilter
  last_update: DateTimeFilter
  password: StringNullableFilter
  payment: PaymentListRelationFilter
  picture: BytesNullableFilter
  rental: RentalListRelationFilter
  staff_id: IntFilter
  store_id: IntFilter
  store_staff_store_idTostore: StoreRelationFilter
  store_store_manager_staff_idTostaff: StoreNullableRelationFilter
  username: StringFilter
}

input StoreListRelationFilter {
  every: StoreWhereInput
  none: StoreWhereInput
  some: StoreWhereInput
}

input StoreNullableRelationFilter {
  is: StoreWhereInput
  isNot: StoreWhereInput
}

input StoreRelationFilter {
  is: StoreWhereInput
  isNot: StoreWhereInput
}

input StoreWhereInput {
  AND: [StoreWhereInput!]
  NOT: [StoreWhereInput!]
  OR: [StoreWhereInput!]
  address: AddressRelationFilter
  address_id: IntFilter
  customer: CustomerListRelationFilter
  inventory: InventoryListRelationFilter
  last_update: DateTimeFilter
  manager_staff_id: IntFilter
  staff_staff_store_idTostore: StaffListRelationFilter
  staff_store_manager_staff_idTostaff: StaffRelationFilter
  store_id: IntFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input film_actorActor_idFilm_idCompoundUniqueInput {
  actor_id: Int!
  film_id: Int!
}

enum film_rating {
  G
  NC_17
  PG
  PG_13
  R
}