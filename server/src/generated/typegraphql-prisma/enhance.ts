import { ClassType } from "type-graphql";
import * as tslib from "tslib";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";

export type MethodDecoratorOverrideFn = (decorators: MethodDecorator[]) => MethodDecorator[];

const crudResolversMap = {
  Actor: crudResolvers.ActorCrudResolver,
  Address: crudResolvers.AddressCrudResolver,
  Category: crudResolvers.CategoryCrudResolver,
  City: crudResolvers.CityCrudResolver,
  Country: crudResolvers.CountryCrudResolver,
  Customer: crudResolvers.CustomerCrudResolver,
  Film: crudResolvers.FilmCrudResolver,
  Film_actor: crudResolvers.Film_actorCrudResolver,
  Film_category: crudResolvers.Film_categoryCrudResolver,
  Film_text: crudResolvers.Film_textCrudResolver,
  Inventory: crudResolvers.InventoryCrudResolver,
  Language: crudResolvers.LanguageCrudResolver,
  Payment: crudResolvers.PaymentCrudResolver,
  Rental: crudResolvers.RentalCrudResolver,
  Staff: crudResolvers.StaffCrudResolver,
  Store: crudResolvers.StoreCrudResolver
};
const actionResolversMap = {
  Actor: {
    aggregateActor: actionResolvers.AggregateActorResolver,
    createManyActor: actionResolvers.CreateManyActorResolver,
    createOneActor: actionResolvers.CreateOneActorResolver,
    deleteManyActor: actionResolvers.DeleteManyActorResolver,
    deleteOneActor: actionResolvers.DeleteOneActorResolver,
    findFirstActor: actionResolvers.FindFirstActorResolver,
    findFirstActorOrThrow: actionResolvers.FindFirstActorOrThrowResolver,
    actors: actionResolvers.FindManyActorResolver,
    actor: actionResolvers.FindUniqueActorResolver,
    getActor: actionResolvers.FindUniqueActorOrThrowResolver,
    groupByActor: actionResolvers.GroupByActorResolver,
    updateManyActor: actionResolvers.UpdateManyActorResolver,
    updateOneActor: actionResolvers.UpdateOneActorResolver,
    upsertOneActor: actionResolvers.UpsertOneActorResolver
  },
  Address: {
    aggregateAddress: actionResolvers.AggregateAddressResolver,
    deleteManyAddress: actionResolvers.DeleteManyAddressResolver,
    deleteOneAddress: actionResolvers.DeleteOneAddressResolver,
    findFirstAddress: actionResolvers.FindFirstAddressResolver,
    findFirstAddressOrThrow: actionResolvers.FindFirstAddressOrThrowResolver,
    addresses: actionResolvers.FindManyAddressResolver,
    address: actionResolvers.FindUniqueAddressResolver,
    getAddress: actionResolvers.FindUniqueAddressOrThrowResolver,
    groupByAddress: actionResolvers.GroupByAddressResolver,
    updateManyAddress: actionResolvers.UpdateManyAddressResolver,
    updateOneAddress: actionResolvers.UpdateOneAddressResolver
  },
  Category: {
    aggregateCategory: actionResolvers.AggregateCategoryResolver,
    createManyCategory: actionResolvers.CreateManyCategoryResolver,
    createOneCategory: actionResolvers.CreateOneCategoryResolver,
    deleteManyCategory: actionResolvers.DeleteManyCategoryResolver,
    deleteOneCategory: actionResolvers.DeleteOneCategoryResolver,
    findFirstCategory: actionResolvers.FindFirstCategoryResolver,
    findFirstCategoryOrThrow: actionResolvers.FindFirstCategoryOrThrowResolver,
    categories: actionResolvers.FindManyCategoryResolver,
    category: actionResolvers.FindUniqueCategoryResolver,
    getCategory: actionResolvers.FindUniqueCategoryOrThrowResolver,
    groupByCategory: actionResolvers.GroupByCategoryResolver,
    updateManyCategory: actionResolvers.UpdateManyCategoryResolver,
    updateOneCategory: actionResolvers.UpdateOneCategoryResolver,
    upsertOneCategory: actionResolvers.UpsertOneCategoryResolver
  },
  City: {
    aggregateCity: actionResolvers.AggregateCityResolver,
    createManyCity: actionResolvers.CreateManyCityResolver,
    createOneCity: actionResolvers.CreateOneCityResolver,
    deleteManyCity: actionResolvers.DeleteManyCityResolver,
    deleteOneCity: actionResolvers.DeleteOneCityResolver,
    findFirstCity: actionResolvers.FindFirstCityResolver,
    findFirstCityOrThrow: actionResolvers.FindFirstCityOrThrowResolver,
    cities: actionResolvers.FindManyCityResolver,
    city: actionResolvers.FindUniqueCityResolver,
    getCity: actionResolvers.FindUniqueCityOrThrowResolver,
    groupByCity: actionResolvers.GroupByCityResolver,
    updateManyCity: actionResolvers.UpdateManyCityResolver,
    updateOneCity: actionResolvers.UpdateOneCityResolver,
    upsertOneCity: actionResolvers.UpsertOneCityResolver
  },
  Country: {
    aggregateCountry: actionResolvers.AggregateCountryResolver,
    createManyCountry: actionResolvers.CreateManyCountryResolver,
    createOneCountry: actionResolvers.CreateOneCountryResolver,
    deleteManyCountry: actionResolvers.DeleteManyCountryResolver,
    deleteOneCountry: actionResolvers.DeleteOneCountryResolver,
    findFirstCountry: actionResolvers.FindFirstCountryResolver,
    findFirstCountryOrThrow: actionResolvers.FindFirstCountryOrThrowResolver,
    countries: actionResolvers.FindManyCountryResolver,
    country: actionResolvers.FindUniqueCountryResolver,
    getCountry: actionResolvers.FindUniqueCountryOrThrowResolver,
    groupByCountry: actionResolvers.GroupByCountryResolver,
    updateManyCountry: actionResolvers.UpdateManyCountryResolver,
    updateOneCountry: actionResolvers.UpdateOneCountryResolver,
    upsertOneCountry: actionResolvers.UpsertOneCountryResolver
  },
  Customer: {
    aggregateCustomer: actionResolvers.AggregateCustomerResolver,
    createManyCustomer: actionResolvers.CreateManyCustomerResolver,
    createOneCustomer: actionResolvers.CreateOneCustomerResolver,
    deleteManyCustomer: actionResolvers.DeleteManyCustomerResolver,
    deleteOneCustomer: actionResolvers.DeleteOneCustomerResolver,
    findFirstCustomer: actionResolvers.FindFirstCustomerResolver,
    findFirstCustomerOrThrow: actionResolvers.FindFirstCustomerOrThrowResolver,
    customers: actionResolvers.FindManyCustomerResolver,
    customer: actionResolvers.FindUniqueCustomerResolver,
    getCustomer: actionResolvers.FindUniqueCustomerOrThrowResolver,
    groupByCustomer: actionResolvers.GroupByCustomerResolver,
    updateManyCustomer: actionResolvers.UpdateManyCustomerResolver,
    updateOneCustomer: actionResolvers.UpdateOneCustomerResolver,
    upsertOneCustomer: actionResolvers.UpsertOneCustomerResolver
  },
  Film: {
    aggregateFilm: actionResolvers.AggregateFilmResolver,
    createManyFilm: actionResolvers.CreateManyFilmResolver,
    createOneFilm: actionResolvers.CreateOneFilmResolver,
    deleteManyFilm: actionResolvers.DeleteManyFilmResolver,
    deleteOneFilm: actionResolvers.DeleteOneFilmResolver,
    findFirstFilm: actionResolvers.FindFirstFilmResolver,
    findFirstFilmOrThrow: actionResolvers.FindFirstFilmOrThrowResolver,
    films: actionResolvers.FindManyFilmResolver,
    film: actionResolvers.FindUniqueFilmResolver,
    getFilm: actionResolvers.FindUniqueFilmOrThrowResolver,
    groupByFilm: actionResolvers.GroupByFilmResolver,
    updateManyFilm: actionResolvers.UpdateManyFilmResolver,
    updateOneFilm: actionResolvers.UpdateOneFilmResolver,
    upsertOneFilm: actionResolvers.UpsertOneFilmResolver
  },
  Film_actor: {
    aggregateFilm_actor: actionResolvers.AggregateFilm_actorResolver,
    createManyFilm_actor: actionResolvers.CreateManyFilm_actorResolver,
    createOneFilm_actor: actionResolvers.CreateOneFilm_actorResolver,
    deleteManyFilm_actor: actionResolvers.DeleteManyFilm_actorResolver,
    deleteOneFilm_actor: actionResolvers.DeleteOneFilm_actorResolver,
    findFirstFilm_actor: actionResolvers.FindFirstFilm_actorResolver,
    findFirstFilm_actorOrThrow: actionResolvers.FindFirstFilm_actorOrThrowResolver,
    film_actors: actionResolvers.FindManyFilm_actorResolver,
    film_actor: actionResolvers.FindUniqueFilm_actorResolver,
    getFilm_actor: actionResolvers.FindUniqueFilm_actorOrThrowResolver,
    groupByFilm_actor: actionResolvers.GroupByFilm_actorResolver,
    updateManyFilm_actor: actionResolvers.UpdateManyFilm_actorResolver,
    updateOneFilm_actor: actionResolvers.UpdateOneFilm_actorResolver,
    upsertOneFilm_actor: actionResolvers.UpsertOneFilm_actorResolver
  },
  Film_category: {
    aggregateFilm_category: actionResolvers.AggregateFilm_categoryResolver,
    createManyFilm_category: actionResolvers.CreateManyFilm_categoryResolver,
    createOneFilm_category: actionResolvers.CreateOneFilm_categoryResolver,
    deleteManyFilm_category: actionResolvers.DeleteManyFilm_categoryResolver,
    deleteOneFilm_category: actionResolvers.DeleteOneFilm_categoryResolver,
    findFirstFilm_category: actionResolvers.FindFirstFilm_categoryResolver,
    findFirstFilm_categoryOrThrow: actionResolvers.FindFirstFilm_categoryOrThrowResolver,
    film_categories: actionResolvers.FindManyFilm_categoryResolver,
    film_category: actionResolvers.FindUniqueFilm_categoryResolver,
    getFilm_category: actionResolvers.FindUniqueFilm_categoryOrThrowResolver,
    groupByFilm_category: actionResolvers.GroupByFilm_categoryResolver,
    updateManyFilm_category: actionResolvers.UpdateManyFilm_categoryResolver,
    updateOneFilm_category: actionResolvers.UpdateOneFilm_categoryResolver,
    upsertOneFilm_category: actionResolvers.UpsertOneFilm_categoryResolver
  },
  Film_text: {
    aggregateFilm_text: actionResolvers.AggregateFilm_textResolver,
    createManyFilm_text: actionResolvers.CreateManyFilm_textResolver,
    createOneFilm_text: actionResolvers.CreateOneFilm_textResolver,
    deleteManyFilm_text: actionResolvers.DeleteManyFilm_textResolver,
    deleteOneFilm_text: actionResolvers.DeleteOneFilm_textResolver,
    findFirstFilm_text: actionResolvers.FindFirstFilm_textResolver,
    findFirstFilm_textOrThrow: actionResolvers.FindFirstFilm_textOrThrowResolver,
    film_texts: actionResolvers.FindManyFilm_textResolver,
    film_text: actionResolvers.FindUniqueFilm_textResolver,
    getFilm_text: actionResolvers.FindUniqueFilm_textOrThrowResolver,
    groupByFilm_text: actionResolvers.GroupByFilm_textResolver,
    updateManyFilm_text: actionResolvers.UpdateManyFilm_textResolver,
    updateOneFilm_text: actionResolvers.UpdateOneFilm_textResolver,
    upsertOneFilm_text: actionResolvers.UpsertOneFilm_textResolver
  },
  Inventory: {
    aggregateInventory: actionResolvers.AggregateInventoryResolver,
    createManyInventory: actionResolvers.CreateManyInventoryResolver,
    createOneInventory: actionResolvers.CreateOneInventoryResolver,
    deleteManyInventory: actionResolvers.DeleteManyInventoryResolver,
    deleteOneInventory: actionResolvers.DeleteOneInventoryResolver,
    findFirstInventory: actionResolvers.FindFirstInventoryResolver,
    findFirstInventoryOrThrow: actionResolvers.FindFirstInventoryOrThrowResolver,
    inventories: actionResolvers.FindManyInventoryResolver,
    inventory: actionResolvers.FindUniqueInventoryResolver,
    getInventory: actionResolvers.FindUniqueInventoryOrThrowResolver,
    groupByInventory: actionResolvers.GroupByInventoryResolver,
    updateManyInventory: actionResolvers.UpdateManyInventoryResolver,
    updateOneInventory: actionResolvers.UpdateOneInventoryResolver,
    upsertOneInventory: actionResolvers.UpsertOneInventoryResolver
  },
  Language: {
    aggregateLanguage: actionResolvers.AggregateLanguageResolver,
    createManyLanguage: actionResolvers.CreateManyLanguageResolver,
    createOneLanguage: actionResolvers.CreateOneLanguageResolver,
    deleteManyLanguage: actionResolvers.DeleteManyLanguageResolver,
    deleteOneLanguage: actionResolvers.DeleteOneLanguageResolver,
    findFirstLanguage: actionResolvers.FindFirstLanguageResolver,
    findFirstLanguageOrThrow: actionResolvers.FindFirstLanguageOrThrowResolver,
    languages: actionResolvers.FindManyLanguageResolver,
    language: actionResolvers.FindUniqueLanguageResolver,
    getLanguage: actionResolvers.FindUniqueLanguageOrThrowResolver,
    groupByLanguage: actionResolvers.GroupByLanguageResolver,
    updateManyLanguage: actionResolvers.UpdateManyLanguageResolver,
    updateOneLanguage: actionResolvers.UpdateOneLanguageResolver,
    upsertOneLanguage: actionResolvers.UpsertOneLanguageResolver
  },
  Payment: {
    aggregatePayment: actionResolvers.AggregatePaymentResolver,
    createManyPayment: actionResolvers.CreateManyPaymentResolver,
    createOnePayment: actionResolvers.CreateOnePaymentResolver,
    deleteManyPayment: actionResolvers.DeleteManyPaymentResolver,
    deleteOnePayment: actionResolvers.DeleteOnePaymentResolver,
    findFirstPayment: actionResolvers.FindFirstPaymentResolver,
    findFirstPaymentOrThrow: actionResolvers.FindFirstPaymentOrThrowResolver,
    payments: actionResolvers.FindManyPaymentResolver,
    payment: actionResolvers.FindUniquePaymentResolver,
    getPayment: actionResolvers.FindUniquePaymentOrThrowResolver,
    groupByPayment: actionResolvers.GroupByPaymentResolver,
    updateManyPayment: actionResolvers.UpdateManyPaymentResolver,
    updateOnePayment: actionResolvers.UpdateOnePaymentResolver,
    upsertOnePayment: actionResolvers.UpsertOnePaymentResolver
  },
  Rental: {
    aggregateRental: actionResolvers.AggregateRentalResolver,
    createManyRental: actionResolvers.CreateManyRentalResolver,
    createOneRental: actionResolvers.CreateOneRentalResolver,
    deleteManyRental: actionResolvers.DeleteManyRentalResolver,
    deleteOneRental: actionResolvers.DeleteOneRentalResolver,
    findFirstRental: actionResolvers.FindFirstRentalResolver,
    findFirstRentalOrThrow: actionResolvers.FindFirstRentalOrThrowResolver,
    rentals: actionResolvers.FindManyRentalResolver,
    rental: actionResolvers.FindUniqueRentalResolver,
    getRental: actionResolvers.FindUniqueRentalOrThrowResolver,
    groupByRental: actionResolvers.GroupByRentalResolver,
    updateManyRental: actionResolvers.UpdateManyRentalResolver,
    updateOneRental: actionResolvers.UpdateOneRentalResolver,
    upsertOneRental: actionResolvers.UpsertOneRentalResolver
  },
  Staff: {
    aggregateStaff: actionResolvers.AggregateStaffResolver,
    createManyStaff: actionResolvers.CreateManyStaffResolver,
    createOneStaff: actionResolvers.CreateOneStaffResolver,
    deleteManyStaff: actionResolvers.DeleteManyStaffResolver,
    deleteOneStaff: actionResolvers.DeleteOneStaffResolver,
    findFirstStaff: actionResolvers.FindFirstStaffResolver,
    findFirstStaffOrThrow: actionResolvers.FindFirstStaffOrThrowResolver,
    findManyStaff: actionResolvers.FindManyStaffResolver,
    findUniqueStaff: actionResolvers.FindUniqueStaffResolver,
    findUniqueStaffOrThrow: actionResolvers.FindUniqueStaffOrThrowResolver,
    groupByStaff: actionResolvers.GroupByStaffResolver,
    updateManyStaff: actionResolvers.UpdateManyStaffResolver,
    updateOneStaff: actionResolvers.UpdateOneStaffResolver,
    upsertOneStaff: actionResolvers.UpsertOneStaffResolver
  },
  Store: {
    aggregateStore: actionResolvers.AggregateStoreResolver,
    createManyStore: actionResolvers.CreateManyStoreResolver,
    createOneStore: actionResolvers.CreateOneStoreResolver,
    deleteManyStore: actionResolvers.DeleteManyStoreResolver,
    deleteOneStore: actionResolvers.DeleteOneStoreResolver,
    findFirstStore: actionResolvers.FindFirstStoreResolver,
    findFirstStoreOrThrow: actionResolvers.FindFirstStoreOrThrowResolver,
    stores: actionResolvers.FindManyStoreResolver,
    store: actionResolvers.FindUniqueStoreResolver,
    getStore: actionResolvers.FindUniqueStoreOrThrowResolver,
    groupByStore: actionResolvers.GroupByStoreResolver,
    updateManyStore: actionResolvers.UpdateManyStoreResolver,
    updateOneStore: actionResolvers.UpdateOneStoreResolver,
    upsertOneStore: actionResolvers.UpsertOneStoreResolver
  }
};
const crudResolversInfo = {
  Actor: ["aggregateActor", "createManyActor", "createOneActor", "deleteManyActor", "deleteOneActor", "findFirstActor", "findFirstActorOrThrow", "actors", "actor", "getActor", "groupByActor", "updateManyActor", "updateOneActor", "upsertOneActor"],
  Address: ["aggregateAddress", "deleteManyAddress", "deleteOneAddress", "findFirstAddress", "findFirstAddressOrThrow", "addresses", "address", "getAddress", "groupByAddress", "updateManyAddress", "updateOneAddress"],
  Category: ["aggregateCategory", "createManyCategory", "createOneCategory", "deleteManyCategory", "deleteOneCategory", "findFirstCategory", "findFirstCategoryOrThrow", "categories", "category", "getCategory", "groupByCategory", "updateManyCategory", "updateOneCategory", "upsertOneCategory"],
  City: ["aggregateCity", "createManyCity", "createOneCity", "deleteManyCity", "deleteOneCity", "findFirstCity", "findFirstCityOrThrow", "cities", "city", "getCity", "groupByCity", "updateManyCity", "updateOneCity", "upsertOneCity"],
  Country: ["aggregateCountry", "createManyCountry", "createOneCountry", "deleteManyCountry", "deleteOneCountry", "findFirstCountry", "findFirstCountryOrThrow", "countries", "country", "getCountry", "groupByCountry", "updateManyCountry", "updateOneCountry", "upsertOneCountry"],
  Customer: ["aggregateCustomer", "createManyCustomer", "createOneCustomer", "deleteManyCustomer", "deleteOneCustomer", "findFirstCustomer", "findFirstCustomerOrThrow", "customers", "customer", "getCustomer", "groupByCustomer", "updateManyCustomer", "updateOneCustomer", "upsertOneCustomer"],
  Film: ["aggregateFilm", "createManyFilm", "createOneFilm", "deleteManyFilm", "deleteOneFilm", "findFirstFilm", "findFirstFilmOrThrow", "films", "film", "getFilm", "groupByFilm", "updateManyFilm", "updateOneFilm", "upsertOneFilm"],
  Film_actor: ["aggregateFilm_actor", "createManyFilm_actor", "createOneFilm_actor", "deleteManyFilm_actor", "deleteOneFilm_actor", "findFirstFilm_actor", "findFirstFilm_actorOrThrow", "film_actors", "film_actor", "getFilm_actor", "groupByFilm_actor", "updateManyFilm_actor", "updateOneFilm_actor", "upsertOneFilm_actor"],
  Film_category: ["aggregateFilm_category", "createManyFilm_category", "createOneFilm_category", "deleteManyFilm_category", "deleteOneFilm_category", "findFirstFilm_category", "findFirstFilm_categoryOrThrow", "film_categories", "film_category", "getFilm_category", "groupByFilm_category", "updateManyFilm_category", "updateOneFilm_category", "upsertOneFilm_category"],
  Film_text: ["aggregateFilm_text", "createManyFilm_text", "createOneFilm_text", "deleteManyFilm_text", "deleteOneFilm_text", "findFirstFilm_text", "findFirstFilm_textOrThrow", "film_texts", "film_text", "getFilm_text", "groupByFilm_text", "updateManyFilm_text", "updateOneFilm_text", "upsertOneFilm_text"],
  Inventory: ["aggregateInventory", "createManyInventory", "createOneInventory", "deleteManyInventory", "deleteOneInventory", "findFirstInventory", "findFirstInventoryOrThrow", "inventories", "inventory", "getInventory", "groupByInventory", "updateManyInventory", "updateOneInventory", "upsertOneInventory"],
  Language: ["aggregateLanguage", "createManyLanguage", "createOneLanguage", "deleteManyLanguage", "deleteOneLanguage", "findFirstLanguage", "findFirstLanguageOrThrow", "languages", "language", "getLanguage", "groupByLanguage", "updateManyLanguage", "updateOneLanguage", "upsertOneLanguage"],
  Payment: ["aggregatePayment", "createManyPayment", "createOnePayment", "deleteManyPayment", "deleteOnePayment", "findFirstPayment", "findFirstPaymentOrThrow", "payments", "payment", "getPayment", "groupByPayment", "updateManyPayment", "updateOnePayment", "upsertOnePayment"],
  Rental: ["aggregateRental", "createManyRental", "createOneRental", "deleteManyRental", "deleteOneRental", "findFirstRental", "findFirstRentalOrThrow", "rentals", "rental", "getRental", "groupByRental", "updateManyRental", "updateOneRental", "upsertOneRental"],
  Staff: ["aggregateStaff", "createManyStaff", "createOneStaff", "deleteManyStaff", "deleteOneStaff", "findFirstStaff", "findFirstStaffOrThrow", "findManyStaff", "findUniqueStaff", "findUniqueStaffOrThrow", "groupByStaff", "updateManyStaff", "updateOneStaff", "upsertOneStaff"],
  Store: ["aggregateStore", "createManyStore", "createOneStore", "deleteManyStore", "deleteOneStore", "findFirstStore", "findFirstStoreOrThrow", "stores", "store", "getStore", "groupByStore", "updateManyStore", "updateOneStore", "upsertOneStore"]
};
const argsInfo = {
  AggregateActorArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyActorArgs: ["data", "skipDuplicates"],
  CreateOneActorArgs: ["data"],
  DeleteManyActorArgs: ["where"],
  DeleteOneActorArgs: ["where"],
  FindFirstActorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstActorOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyActorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueActorArgs: ["where"],
  FindUniqueActorOrThrowArgs: ["where"],
  GroupByActorArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyActorArgs: ["data", "where"],
  UpdateOneActorArgs: ["data", "where"],
  UpsertOneActorArgs: ["where", "create", "update"],
  AggregateAddressArgs: ["where", "orderBy", "cursor", "take", "skip"],
  DeleteManyAddressArgs: ["where"],
  DeleteOneAddressArgs: ["where"],
  FindFirstAddressArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstAddressOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAddressArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueAddressArgs: ["where"],
  FindUniqueAddressOrThrowArgs: ["where"],
  GroupByAddressArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyAddressArgs: ["data", "where"],
  UpdateOneAddressArgs: ["data", "where"],
  AggregateCategoryArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyCategoryArgs: ["data", "skipDuplicates"],
  CreateOneCategoryArgs: ["data"],
  DeleteManyCategoryArgs: ["where"],
  DeleteOneCategoryArgs: ["where"],
  FindFirstCategoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstCategoryOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCategoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueCategoryArgs: ["where"],
  FindUniqueCategoryOrThrowArgs: ["where"],
  GroupByCategoryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyCategoryArgs: ["data", "where"],
  UpdateOneCategoryArgs: ["data", "where"],
  UpsertOneCategoryArgs: ["where", "create", "update"],
  AggregateCityArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyCityArgs: ["data", "skipDuplicates"],
  CreateOneCityArgs: ["data"],
  DeleteManyCityArgs: ["where"],
  DeleteOneCityArgs: ["where"],
  FindFirstCityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstCityOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueCityArgs: ["where"],
  FindUniqueCityOrThrowArgs: ["where"],
  GroupByCityArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyCityArgs: ["data", "where"],
  UpdateOneCityArgs: ["data", "where"],
  UpsertOneCityArgs: ["where", "create", "update"],
  AggregateCountryArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyCountryArgs: ["data", "skipDuplicates"],
  CreateOneCountryArgs: ["data"],
  DeleteManyCountryArgs: ["where"],
  DeleteOneCountryArgs: ["where"],
  FindFirstCountryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstCountryOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCountryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueCountryArgs: ["where"],
  FindUniqueCountryOrThrowArgs: ["where"],
  GroupByCountryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyCountryArgs: ["data", "where"],
  UpdateOneCountryArgs: ["data", "where"],
  UpsertOneCountryArgs: ["where", "create", "update"],
  AggregateCustomerArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyCustomerArgs: ["data", "skipDuplicates"],
  CreateOneCustomerArgs: ["data"],
  DeleteManyCustomerArgs: ["where"],
  DeleteOneCustomerArgs: ["where"],
  FindFirstCustomerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstCustomerOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyCustomerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueCustomerArgs: ["where"],
  FindUniqueCustomerOrThrowArgs: ["where"],
  GroupByCustomerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyCustomerArgs: ["data", "where"],
  UpdateOneCustomerArgs: ["data", "where"],
  UpsertOneCustomerArgs: ["where", "create", "update"],
  AggregateFilmArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyFilmArgs: ["data", "skipDuplicates"],
  CreateOneFilmArgs: ["data"],
  DeleteManyFilmArgs: ["where"],
  DeleteOneFilmArgs: ["where"],
  FindFirstFilmArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstFilmOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFilmArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueFilmArgs: ["where"],
  FindUniqueFilmOrThrowArgs: ["where"],
  GroupByFilmArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyFilmArgs: ["data", "where"],
  UpdateOneFilmArgs: ["data", "where"],
  UpsertOneFilmArgs: ["where", "create", "update"],
  AggregateFilm_actorArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyFilm_actorArgs: ["data", "skipDuplicates"],
  CreateOneFilm_actorArgs: ["data"],
  DeleteManyFilm_actorArgs: ["where"],
  DeleteOneFilm_actorArgs: ["where"],
  FindFirstFilm_actorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstFilm_actorOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFilm_actorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueFilm_actorArgs: ["where"],
  FindUniqueFilm_actorOrThrowArgs: ["where"],
  GroupByFilm_actorArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyFilm_actorArgs: ["data", "where"],
  UpdateOneFilm_actorArgs: ["data", "where"],
  UpsertOneFilm_actorArgs: ["where", "create", "update"],
  AggregateFilm_categoryArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyFilm_categoryArgs: ["data", "skipDuplicates"],
  CreateOneFilm_categoryArgs: ["data"],
  DeleteManyFilm_categoryArgs: ["where"],
  DeleteOneFilm_categoryArgs: ["where"],
  FindFirstFilm_categoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstFilm_categoryOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFilm_categoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueFilm_categoryArgs: ["where"],
  FindUniqueFilm_categoryOrThrowArgs: ["where"],
  GroupByFilm_categoryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyFilm_categoryArgs: ["data", "where"],
  UpdateOneFilm_categoryArgs: ["data", "where"],
  UpsertOneFilm_categoryArgs: ["where", "create", "update"],
  AggregateFilm_textArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyFilm_textArgs: ["data", "skipDuplicates"],
  CreateOneFilm_textArgs: ["data"],
  DeleteManyFilm_textArgs: ["where"],
  DeleteOneFilm_textArgs: ["where"],
  FindFirstFilm_textArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstFilm_textOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFilm_textArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueFilm_textArgs: ["where"],
  FindUniqueFilm_textOrThrowArgs: ["where"],
  GroupByFilm_textArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyFilm_textArgs: ["data", "where"],
  UpdateOneFilm_textArgs: ["data", "where"],
  UpsertOneFilm_textArgs: ["where", "create", "update"],
  AggregateInventoryArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyInventoryArgs: ["data", "skipDuplicates"],
  CreateOneInventoryArgs: ["data"],
  DeleteManyInventoryArgs: ["where"],
  DeleteOneInventoryArgs: ["where"],
  FindFirstInventoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstInventoryOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyInventoryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueInventoryArgs: ["where"],
  FindUniqueInventoryOrThrowArgs: ["where"],
  GroupByInventoryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyInventoryArgs: ["data", "where"],
  UpdateOneInventoryArgs: ["data", "where"],
  UpsertOneInventoryArgs: ["where", "create", "update"],
  AggregateLanguageArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyLanguageArgs: ["data", "skipDuplicates"],
  CreateOneLanguageArgs: ["data"],
  DeleteManyLanguageArgs: ["where"],
  DeleteOneLanguageArgs: ["where"],
  FindFirstLanguageArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstLanguageOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyLanguageArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueLanguageArgs: ["where"],
  FindUniqueLanguageOrThrowArgs: ["where"],
  GroupByLanguageArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyLanguageArgs: ["data", "where"],
  UpdateOneLanguageArgs: ["data", "where"],
  UpsertOneLanguageArgs: ["where", "create", "update"],
  AggregatePaymentArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyPaymentArgs: ["data", "skipDuplicates"],
  CreateOnePaymentArgs: ["data"],
  DeleteManyPaymentArgs: ["where"],
  DeleteOnePaymentArgs: ["where"],
  FindFirstPaymentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstPaymentOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyPaymentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniquePaymentArgs: ["where"],
  FindUniquePaymentOrThrowArgs: ["where"],
  GroupByPaymentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyPaymentArgs: ["data", "where"],
  UpdateOnePaymentArgs: ["data", "where"],
  UpsertOnePaymentArgs: ["where", "create", "update"],
  AggregateRentalArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyRentalArgs: ["data", "skipDuplicates"],
  CreateOneRentalArgs: ["data"],
  DeleteManyRentalArgs: ["where"],
  DeleteOneRentalArgs: ["where"],
  FindFirstRentalArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstRentalOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyRentalArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueRentalArgs: ["where"],
  FindUniqueRentalOrThrowArgs: ["where"],
  GroupByRentalArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyRentalArgs: ["data", "where"],
  UpdateOneRentalArgs: ["data", "where"],
  UpsertOneRentalArgs: ["where", "create", "update"],
  AggregateStaffArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyStaffArgs: ["data", "skipDuplicates"],
  CreateOneStaffArgs: ["data"],
  DeleteManyStaffArgs: ["where"],
  DeleteOneStaffArgs: ["where"],
  FindFirstStaffArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstStaffOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyStaffArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueStaffArgs: ["where"],
  FindUniqueStaffOrThrowArgs: ["where"],
  GroupByStaffArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyStaffArgs: ["data", "where"],
  UpdateOneStaffArgs: ["data", "where"],
  UpsertOneStaffArgs: ["where", "create", "update"],
  AggregateStoreArgs: ["where", "orderBy", "cursor", "take", "skip"],
  CreateManyStoreArgs: ["data", "skipDuplicates"],
  CreateOneStoreArgs: ["data"],
  DeleteManyStoreArgs: ["where"],
  DeleteOneStoreArgs: ["where"],
  FindFirstStoreArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindFirstStoreOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyStoreArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindUniqueStoreArgs: ["where"],
  FindUniqueStoreOrThrowArgs: ["where"],
  GroupByStoreArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  UpdateManyStoreArgs: ["data", "where"],
  UpdateOneStoreArgs: ["data", "where"],
  UpsertOneStoreArgs: ["where", "create", "update"]
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<
  TModel extends ResolverModelNames
> = keyof typeof crudResolversMap[TModel]["prototype"];

export type ResolverActionsConfig<
  TModel extends ResolverModelNames
> = Partial<Record<ModelResolverActionNames<TModel>, MethodDecorator[] | MethodDecoratorOverrideFn>>
  & {
    _all?: MethodDecorator[];
    _query?: MethodDecorator[];
    _mutation?: MethodDecorator[];
  };

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  const mutationOperationPrefixes = [
    "createOne", "createMany", "deleteOne", "updateOne", "deleteMany", "updateMany", "upsertOne"
  ];
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName = resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    const allActionsDecorators = resolverActionsConfig._all;
    const resolverActionNames = crudResolversInfo[modelName as keyof typeof crudResolversInfo];
    for (const resolverActionName of resolverActionNames) {
      const maybeDecoratorsOrFn = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[] | MethodDecoratorOverrideFn | undefined;
      const isWriteOperation = mutationOperationPrefixes.some(prefix => resolverActionName.startsWith(prefix));
      const operationKindDecorators = isWriteOperation ? resolverActionsConfig._mutation : resolverActionsConfig._query;
      const mainDecorators = [
        ...allActionsDecorators ?? [],
        ...operationKindDecorators ?? [],
      ]
      let decorators: MethodDecorator[];
      if (typeof maybeDecoratorsOrFn === "function") {
        decorators = maybeDecoratorsOrFn(mainDecorators);
      } else {
        decorators = [...mainDecorators, ...maybeDecoratorsOrFn ?? []];
      }
      const actionTarget = (actionResolversConfig[
        resolverActionName as keyof typeof actionResolversConfig
      ] as Function).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof typeof argsTypes[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<
  TArgsType extends ArgsTypesNames
> = FieldsConfig<ArgFieldNames<TArgsType>>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName = argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  Actor: relationResolvers.ActorRelationsResolver,
  Address: relationResolvers.AddressRelationsResolver,
  Category: relationResolvers.CategoryRelationsResolver,
  City: relationResolvers.CityRelationsResolver,
  Country: relationResolvers.CountryRelationsResolver,
  Customer: relationResolvers.CustomerRelationsResolver,
  Film: relationResolvers.FilmRelationsResolver,
  Film_actor: relationResolvers.Film_actorRelationsResolver,
  Film_category: relationResolvers.Film_categoryRelationsResolver,
  Inventory: relationResolvers.InventoryRelationsResolver,
  Language: relationResolvers.LanguageRelationsResolver,
  Payment: relationResolvers.PaymentRelationsResolver,
  Rental: relationResolvers.RentalRelationsResolver,
  Staff: relationResolvers.StaffRelationsResolver,
  Store: relationResolvers.StoreRelationsResolver
};
const relationResolversInfo = {
  Actor: ["film_actor"],
  Address: ["city", "customer", "staff", "store"],
  Category: ["film_category"],
  City: ["address", "country"],
  Country: ["city"],
  Customer: ["address", "store", "payment", "rental"],
  Film: ["language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_actor", "film_category", "inventory"],
  Film_actor: ["actor", "film"],
  Film_category: ["category", "film"],
  Inventory: ["film", "store", "rental"],
  Language: ["film_film_language_idTolanguage", "film_film_original_language_idTolanguage"],
  Payment: ["customer", "rental", "staff"],
  Rental: ["payment", "customer", "inventory", "staff"],
  Staff: ["payment", "rental", "address", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  Store: ["customer", "inventory", "staff_staff_store_idTostore", "address", "staff_store_manager_staff_idTostaff"]
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<
  TModel extends RelationResolverModelNames
> = keyof typeof relationResolversMap[TModel]["prototype"];

export type RelationResolverActionsConfig<TModel extends RelationResolverModelNames>
  = Partial<Record<RelationResolverActionNames<TModel>, MethodDecorator[] | MethodDecoratorOverrideFn>>
  & { _all?: MethodDecorator[] };

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
    const modelName = relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig = relationResolversEnhanceMap[modelName]!;
    const allActionsDecorators = relationResolverActionsConfig._all ?? [];
    const relationResolverActionNames = relationResolversInfo[modelName as keyof typeof relationResolversInfo];
    for (const relationResolverActionName of relationResolverActionNames) {
      const maybeDecoratorsOrFn = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[] | MethodDecoratorOverrideFn | undefined;
      let decorators: MethodDecorator[];
      if (typeof maybeDecoratorsOrFn === "function") {
        decorators = maybeDecoratorsOrFn(allActionsDecorators);
      } else {
        decorators = [...allActionsDecorators, ...maybeDecoratorsOrFn ?? []];
      }
      tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

export type PropertyDecoratorOverrideFn = (decorators: PropertyDecorator[]) => PropertyDecorator[];

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys, PropertyDecorator[] | PropertyDecoratorOverrideFn>
> & { _all?: PropertyDecorator[] };

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[]
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    const allFieldsDecorators = enhanceConfig.fields._all ?? [];
    for (const typeFieldName of typeFieldNames) {
      const maybeDecoratorsOrFn = enhanceConfig.fields[
        typeFieldName
      ] as PropertyDecorator[] | PropertyDecoratorOverrideFn | undefined;
      let decorators: PropertyDecorator[];
      if (typeof maybeDecoratorsOrFn === "function") {
        decorators = maybeDecoratorsOrFn(allFieldsDecorators);
      } else {
        decorators = [...allFieldsDecorators, ...maybeDecoratorsOrFn ?? []];
      }
      tslib.__decorate(decorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  Actor: ["actor_id", "first_name", "last_name", "last_update"],
  Address: ["address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update"],
  Category: ["category_id", "name", "last_update"],
  City: ["city_id", "city", "country_id", "last_update"],
  Country: ["country_id", "country", "last_update"],
  Customer: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"],
  Film: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  Film_actor: ["actor_id", "film_id", "last_update"],
  Film_category: ["film_id", "category_id", "last_update"],
  Film_text: ["film_id", "title", "description"],
  Inventory: ["inventory_id", "film_id", "store_id", "last_update"],
  Language: ["language_id", "name", "last_update"],
  Payment: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update"],
  Rental: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"],
  Staff: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"],
  Store: ["store_id", "manager_staff_id", "address_id", "last_update"]
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof typeof models[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregateActor: ["_count", "_avg", "_sum", "_min", "_max"],
  ActorGroupBy: ["actor_id", "first_name", "last_name", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateAddress: ["_count", "_avg", "_sum", "_min", "_max"],
  AddressGroupBy: ["address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCategory: ["_count", "_avg", "_sum", "_min", "_max"],
  CategoryGroupBy: ["category_id", "name", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCity: ["_count", "_avg", "_sum", "_min", "_max"],
  CityGroupBy: ["city_id", "city", "country_id", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCountry: ["_count", "_avg", "_sum", "_min", "_max"],
  CountryGroupBy: ["country_id", "country", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateCustomer: ["_count", "_avg", "_sum", "_min", "_max"],
  CustomerGroupBy: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFilm: ["_count", "_avg", "_sum", "_min", "_max"],
  FilmGroupBy: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFilm_actor: ["_count", "_avg", "_sum", "_min", "_max"],
  Film_actorGroupBy: ["actor_id", "film_id", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFilm_category: ["_count", "_avg", "_sum", "_min", "_max"],
  Film_categoryGroupBy: ["film_id", "category_id", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateFilm_text: ["_count", "_avg", "_sum", "_min", "_max"],
  Film_textGroupBy: ["film_id", "title", "description", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateInventory: ["_count", "_avg", "_sum", "_min", "_max"],
  InventoryGroupBy: ["inventory_id", "film_id", "store_id", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateLanguage: ["_count", "_avg", "_sum", "_min", "_max"],
  LanguageGroupBy: ["language_id", "name", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregatePayment: ["_count", "_avg", "_sum", "_min", "_max"],
  PaymentGroupBy: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateRental: ["_count", "_avg", "_sum", "_min", "_max"],
  RentalGroupBy: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateStaff: ["_count", "_avg", "_sum", "_min", "_max"],
  StaffGroupBy: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateStore: ["_count", "_avg", "_sum", "_min", "_max"],
  StoreGroupBy: ["store_id", "manager_staff_id", "address_id", "last_update", "_count", "_avg", "_sum", "_min", "_max"],
  AffectedRowsOutput: ["count"],
  ActorCount: ["film_actor"],
  ActorCountAggregate: ["actor_id", "first_name", "last_name", "last_update", "_all"],
  ActorAvgAggregate: ["actor_id"],
  ActorSumAggregate: ["actor_id"],
  ActorMinAggregate: ["actor_id", "first_name", "last_name", "last_update"],
  ActorMaxAggregate: ["actor_id", "first_name", "last_name", "last_update"],
  AddressCount: ["customer", "staff", "store"],
  AddressCountAggregate: ["address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update", "_all"],
  AddressAvgAggregate: ["address_id", "city_id"],
  AddressSumAggregate: ["address_id", "city_id"],
  AddressMinAggregate: ["address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update"],
  AddressMaxAggregate: ["address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update"],
  CategoryCount: ["film_category"],
  CategoryCountAggregate: ["category_id", "name", "last_update", "_all"],
  CategoryAvgAggregate: ["category_id"],
  CategorySumAggregate: ["category_id"],
  CategoryMinAggregate: ["category_id", "name", "last_update"],
  CategoryMaxAggregate: ["category_id", "name", "last_update"],
  CityCount: ["address"],
  CityCountAggregate: ["city_id", "city", "country_id", "last_update", "_all"],
  CityAvgAggregate: ["city_id", "country_id"],
  CitySumAggregate: ["city_id", "country_id"],
  CityMinAggregate: ["city_id", "city", "country_id", "last_update"],
  CityMaxAggregate: ["city_id", "city", "country_id", "last_update"],
  CountryCount: ["city"],
  CountryCountAggregate: ["country_id", "country", "last_update", "_all"],
  CountryAvgAggregate: ["country_id"],
  CountrySumAggregate: ["country_id"],
  CountryMinAggregate: ["country_id", "country", "last_update"],
  CountryMaxAggregate: ["country_id", "country", "last_update"],
  CustomerCount: ["payment", "rental"],
  CustomerCountAggregate: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update", "_all"],
  CustomerAvgAggregate: ["customer_id", "store_id", "address_id"],
  CustomerSumAggregate: ["customer_id", "store_id", "address_id"],
  CustomerMinAggregate: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"],
  CustomerMaxAggregate: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"],
  FilmCount: ["film_actor", "film_category", "inventory"],
  FilmCountAggregate: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "_all"],
  FilmAvgAggregate: ["film_id", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost"],
  FilmSumAggregate: ["film_id", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost"],
  FilmMinAggregate: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  FilmMaxAggregate: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  Film_actorCountAggregate: ["actor_id", "film_id", "last_update", "_all"],
  Film_actorAvgAggregate: ["actor_id", "film_id"],
  Film_actorSumAggregate: ["actor_id", "film_id"],
  Film_actorMinAggregate: ["actor_id", "film_id", "last_update"],
  Film_actorMaxAggregate: ["actor_id", "film_id", "last_update"],
  Film_categoryCountAggregate: ["film_id", "category_id", "last_update", "_all"],
  Film_categoryAvgAggregate: ["film_id", "category_id"],
  Film_categorySumAggregate: ["film_id", "category_id"],
  Film_categoryMinAggregate: ["film_id", "category_id", "last_update"],
  Film_categoryMaxAggregate: ["film_id", "category_id", "last_update"],
  Film_textCountAggregate: ["film_id", "title", "description", "_all"],
  Film_textAvgAggregate: ["film_id"],
  Film_textSumAggregate: ["film_id"],
  Film_textMinAggregate: ["film_id", "title", "description"],
  Film_textMaxAggregate: ["film_id", "title", "description"],
  InventoryCount: ["rental"],
  InventoryCountAggregate: ["inventory_id", "film_id", "store_id", "last_update", "_all"],
  InventoryAvgAggregate: ["inventory_id", "film_id", "store_id"],
  InventorySumAggregate: ["inventory_id", "film_id", "store_id"],
  InventoryMinAggregate: ["inventory_id", "film_id", "store_id", "last_update"],
  InventoryMaxAggregate: ["inventory_id", "film_id", "store_id", "last_update"],
  LanguageCount: ["film_film_language_idTolanguage", "film_film_original_language_idTolanguage"],
  LanguageCountAggregate: ["language_id", "name", "last_update", "_all"],
  LanguageAvgAggregate: ["language_id"],
  LanguageSumAggregate: ["language_id"],
  LanguageMinAggregate: ["language_id", "name", "last_update"],
  LanguageMaxAggregate: ["language_id", "name", "last_update"],
  PaymentCountAggregate: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update", "_all"],
  PaymentAvgAggregate: ["payment_id", "customer_id", "staff_id", "rental_id", "amount"],
  PaymentSumAggregate: ["payment_id", "customer_id", "staff_id", "rental_id", "amount"],
  PaymentMinAggregate: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update"],
  PaymentMaxAggregate: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update"],
  RentalCount: ["payment"],
  RentalCountAggregate: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update", "_all"],
  RentalAvgAggregate: ["rental_id", "inventory_id", "customer_id", "staff_id"],
  RentalSumAggregate: ["rental_id", "inventory_id", "customer_id", "staff_id"],
  RentalMinAggregate: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"],
  RentalMaxAggregate: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"],
  StaffCount: ["payment", "rental"],
  StaffCountAggregate: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update", "_all"],
  StaffAvgAggregate: ["staff_id", "address_id", "store_id"],
  StaffSumAggregate: ["staff_id", "address_id", "store_id"],
  StaffMinAggregate: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"],
  StaffMaxAggregate: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"],
  StoreCount: ["customer", "inventory", "staff_staff_store_idTostore"],
  StoreCountAggregate: ["store_id", "manager_staff_id", "address_id", "last_update", "_all"],
  StoreAvgAggregate: ["store_id", "manager_staff_id", "address_id"],
  StoreSumAggregate: ["store_id", "manager_staff_id", "address_id"],
  StoreMinAggregate: ["store_id", "manager_staff_id", "address_id", "last_update"],
  StoreMaxAggregate: ["store_id", "manager_staff_id", "address_id", "last_update"]
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof typeof outputTypes[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<
  TOutput extends OutputTypesNames
> = FieldsConfig<OutputTypeFieldNames<TOutput>>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName = outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  ActorWhereInput: ["AND", "OR", "NOT", "actor_id", "first_name", "last_name", "last_update", "film_actor"],
  ActorOrderByWithRelationInput: ["actor_id", "first_name", "last_name", "last_update", "film_actor"],
  ActorWhereUniqueInput: ["actor_id", "AND", "OR", "NOT", "first_name", "last_name", "last_update", "film_actor"],
  ActorOrderByWithAggregationInput: ["actor_id", "first_name", "last_name", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  ActorScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "actor_id", "first_name", "last_name", "last_update"],
  AddressWhereInput: ["AND", "OR", "NOT", "address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update", "city", "customer", "staff", "store"],
  AddressOrderByWithRelationInput: ["address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update", "city", "customer", "staff", "store"],
  AddressWhereUniqueInput: ["address_id", "AND", "OR", "NOT", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update", "city", "customer", "staff", "store"],
  AddressOrderByWithAggregationInput: ["address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  AddressScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update"],
  CategoryWhereInput: ["AND", "OR", "NOT", "category_id", "name", "last_update", "film_category"],
  CategoryOrderByWithRelationInput: ["category_id", "name", "last_update", "film_category"],
  CategoryWhereUniqueInput: ["category_id", "AND", "OR", "NOT", "name", "last_update", "film_category"],
  CategoryOrderByWithAggregationInput: ["category_id", "name", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  CategoryScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "category_id", "name", "last_update"],
  CityWhereInput: ["AND", "OR", "NOT", "city_id", "city", "country_id", "last_update", "address", "country"],
  CityOrderByWithRelationInput: ["city_id", "city", "country_id", "last_update", "address", "country"],
  CityWhereUniqueInput: ["city_id", "AND", "OR", "NOT", "city", "country_id", "last_update", "address", "country"],
  CityOrderByWithAggregationInput: ["city_id", "city", "country_id", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  CityScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "city_id", "city", "country_id", "last_update"],
  CountryWhereInput: ["AND", "OR", "NOT", "country_id", "country", "last_update", "city"],
  CountryOrderByWithRelationInput: ["country_id", "country", "last_update", "city"],
  CountryWhereUniqueInput: ["country_id", "AND", "OR", "NOT", "country", "last_update", "city"],
  CountryOrderByWithAggregationInput: ["country_id", "country", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  CountryScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "country_id", "country", "last_update"],
  CustomerWhereInput: ["AND", "OR", "NOT", "customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update", "address", "store", "payment", "rental"],
  CustomerOrderByWithRelationInput: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update", "address", "store", "payment", "rental"],
  CustomerWhereUniqueInput: ["customer_id", "AND", "OR", "NOT", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update", "address", "store", "payment", "rental"],
  CustomerOrderByWithAggregationInput: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  CustomerScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"],
  FilmWhereInput: ["AND", "OR", "NOT", "film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_actor", "film_category", "inventory"],
  FilmOrderByWithRelationInput: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_actor", "film_category", "inventory"],
  FilmWhereUniqueInput: ["film_id", "AND", "OR", "NOT", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_actor", "film_category", "inventory"],
  FilmOrderByWithAggregationInput: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  FilmScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  Film_actorWhereInput: ["AND", "OR", "NOT", "actor_id", "film_id", "last_update", "actor", "film"],
  Film_actorOrderByWithRelationInput: ["actor_id", "film_id", "last_update", "actor", "film"],
  Film_actorWhereUniqueInput: ["actor_id_film_id", "AND", "OR", "NOT", "actor_id", "film_id", "last_update", "actor", "film"],
  Film_actorOrderByWithAggregationInput: ["actor_id", "film_id", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  Film_actorScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "actor_id", "film_id", "last_update"],
  Film_categoryWhereInput: ["AND", "OR", "NOT", "film_id", "category_id", "last_update", "category", "film"],
  Film_categoryOrderByWithRelationInput: ["film_id", "category_id", "last_update", "category", "film"],
  Film_categoryWhereUniqueInput: ["film_id_category_id", "AND", "OR", "NOT", "film_id", "category_id", "last_update", "category", "film"],
  Film_categoryOrderByWithAggregationInput: ["film_id", "category_id", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  Film_categoryScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "film_id", "category_id", "last_update"],
  Film_textWhereInput: ["AND", "OR", "NOT", "film_id", "title", "description"],
  Film_textOrderByWithRelationInput: ["film_id", "title", "description"],
  Film_textWhereUniqueInput: ["film_id", "AND", "OR", "NOT", "title", "description"],
  Film_textOrderByWithAggregationInput: ["film_id", "title", "description", "_count", "_avg", "_max", "_min", "_sum"],
  Film_textScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "film_id", "title", "description"],
  InventoryWhereInput: ["AND", "OR", "NOT", "inventory_id", "film_id", "store_id", "last_update", "film", "store", "rental"],
  InventoryOrderByWithRelationInput: ["inventory_id", "film_id", "store_id", "last_update", "film", "store", "rental"],
  InventoryWhereUniqueInput: ["inventory_id", "AND", "OR", "NOT", "film_id", "store_id", "last_update", "film", "store", "rental"],
  InventoryOrderByWithAggregationInput: ["inventory_id", "film_id", "store_id", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  InventoryScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "inventory_id", "film_id", "store_id", "last_update"],
  LanguageWhereInput: ["AND", "OR", "NOT", "language_id", "name", "last_update", "film_film_language_idTolanguage", "film_film_original_language_idTolanguage"],
  LanguageOrderByWithRelationInput: ["language_id", "name", "last_update", "film_film_language_idTolanguage", "film_film_original_language_idTolanguage"],
  LanguageWhereUniqueInput: ["language_id", "AND", "OR", "NOT", "name", "last_update", "film_film_language_idTolanguage", "film_film_original_language_idTolanguage"],
  LanguageOrderByWithAggregationInput: ["language_id", "name", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  LanguageScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "language_id", "name", "last_update"],
  PaymentWhereInput: ["AND", "OR", "NOT", "payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update", "customer", "rental", "staff"],
  PaymentOrderByWithRelationInput: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update", "customer", "rental", "staff"],
  PaymentWhereUniqueInput: ["payment_id", "AND", "OR", "NOT", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update", "customer", "rental", "staff"],
  PaymentOrderByWithAggregationInput: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  PaymentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update"],
  RentalWhereInput: ["AND", "OR", "NOT", "rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update", "payment", "customer", "inventory", "staff"],
  RentalOrderByWithRelationInput: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update", "payment", "customer", "inventory", "staff"],
  RentalWhereUniqueInput: ["rental_id", "rental_date_inventory_id_customer_id", "AND", "OR", "NOT", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update", "payment", "customer", "inventory", "staff"],
  RentalOrderByWithAggregationInput: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  RentalScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"],
  StaffWhereInput: ["AND", "OR", "NOT", "staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update", "payment", "rental", "address", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  StaffOrderByWithRelationInput: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update", "payment", "rental", "address", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  StaffWhereUniqueInput: ["staff_id", "AND", "OR", "NOT", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update", "payment", "rental", "address", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  StaffOrderByWithAggregationInput: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  StaffScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"],
  StoreWhereInput: ["AND", "OR", "NOT", "store_id", "manager_staff_id", "address_id", "last_update", "customer", "inventory", "staff_staff_store_idTostore", "address", "staff_store_manager_staff_idTostaff"],
  StoreOrderByWithRelationInput: ["store_id", "manager_staff_id", "address_id", "last_update", "customer", "inventory", "staff_staff_store_idTostore", "address", "staff_store_manager_staff_idTostaff"],
  StoreWhereUniqueInput: ["store_id", "manager_staff_id", "AND", "OR", "NOT", "address_id", "last_update", "customer", "inventory", "staff_staff_store_idTostore", "address", "staff_store_manager_staff_idTostaff"],
  StoreOrderByWithAggregationInput: ["store_id", "manager_staff_id", "address_id", "last_update", "_count", "_avg", "_max", "_min", "_sum"],
  StoreScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "store_id", "manager_staff_id", "address_id", "last_update"],
  ActorCreateInput: ["first_name", "last_name", "last_update", "film_actor"],
  ActorUpdateInput: ["first_name", "last_name", "last_update", "film_actor"],
  ActorCreateManyInput: ["actor_id", "first_name", "last_name", "last_update"],
  ActorUpdateManyMutationInput: ["first_name", "last_name", "last_update"],
  AddressUpdateInput: ["address", "address2", "district", "postal_code", "phone", "last_update", "city", "customer", "staff", "store"],
  AddressUpdateManyMutationInput: ["address", "address2", "district", "postal_code", "phone", "last_update"],
  CategoryCreateInput: ["name", "last_update", "film_category"],
  CategoryUpdateInput: ["name", "last_update", "film_category"],
  CategoryCreateManyInput: ["category_id", "name", "last_update"],
  CategoryUpdateManyMutationInput: ["name", "last_update"],
  CityCreateInput: ["city", "last_update", "address", "country"],
  CityUpdateInput: ["city", "last_update", "address", "country"],
  CityCreateManyInput: ["city_id", "city", "country_id", "last_update"],
  CityUpdateManyMutationInput: ["city", "last_update"],
  CountryCreateInput: ["country", "last_update", "city"],
  CountryUpdateInput: ["country", "last_update", "city"],
  CountryCreateManyInput: ["country_id", "country", "last_update"],
  CountryUpdateManyMutationInput: ["country", "last_update"],
  CustomerCreateInput: ["first_name", "last_name", "email", "active", "create_date", "last_update", "address", "store", "payment", "rental"],
  CustomerUpdateInput: ["first_name", "last_name", "email", "active", "create_date", "last_update", "address", "store", "payment", "rental"],
  CustomerCreateManyInput: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"],
  CustomerUpdateManyMutationInput: ["first_name", "last_name", "email", "active", "create_date", "last_update"],
  FilmCreateInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_actor", "film_category", "inventory"],
  FilmUpdateInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_actor", "film_category", "inventory"],
  FilmCreateManyInput: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  FilmUpdateManyMutationInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  Film_actorCreateInput: ["last_update", "actor", "film"],
  Film_actorUpdateInput: ["last_update", "actor", "film"],
  Film_actorCreateManyInput: ["actor_id", "film_id", "last_update"],
  Film_actorUpdateManyMutationInput: ["last_update"],
  Film_categoryCreateInput: ["last_update", "category", "film"],
  Film_categoryUpdateInput: ["last_update", "category", "film"],
  Film_categoryCreateManyInput: ["film_id", "category_id", "last_update"],
  Film_categoryUpdateManyMutationInput: ["last_update"],
  Film_textCreateInput: ["film_id", "title", "description"],
  Film_textUpdateInput: ["film_id", "title", "description"],
  Film_textCreateManyInput: ["film_id", "title", "description"],
  Film_textUpdateManyMutationInput: ["film_id", "title", "description"],
  InventoryCreateInput: ["last_update", "film", "store", "rental"],
  InventoryUpdateInput: ["last_update", "film", "store", "rental"],
  InventoryCreateManyInput: ["inventory_id", "film_id", "store_id", "last_update"],
  InventoryUpdateManyMutationInput: ["last_update"],
  LanguageCreateInput: ["name", "last_update", "film_film_language_idTolanguage", "film_film_original_language_idTolanguage"],
  LanguageUpdateInput: ["name", "last_update", "film_film_language_idTolanguage", "film_film_original_language_idTolanguage"],
  LanguageCreateManyInput: ["language_id", "name", "last_update"],
  LanguageUpdateManyMutationInput: ["name", "last_update"],
  PaymentCreateInput: ["amount", "payment_date", "last_update", "customer", "rental", "staff"],
  PaymentUpdateInput: ["amount", "payment_date", "last_update", "customer", "rental", "staff"],
  PaymentCreateManyInput: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update"],
  PaymentUpdateManyMutationInput: ["amount", "payment_date", "last_update"],
  RentalCreateInput: ["rental_date", "return_date", "last_update", "payment", "customer", "inventory", "staff"],
  RentalUpdateInput: ["rental_date", "return_date", "last_update", "payment", "customer", "inventory", "staff"],
  RentalCreateManyInput: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"],
  RentalUpdateManyMutationInput: ["rental_date", "return_date", "last_update"],
  StaffCreateInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "payment", "rental", "address", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  StaffUpdateInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "payment", "rental", "address", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  StaffCreateManyInput: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"],
  StaffUpdateManyMutationInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update"],
  StoreCreateInput: ["last_update", "customer", "inventory", "staff_staff_store_idTostore", "address", "staff_store_manager_staff_idTostaff"],
  StoreUpdateInput: ["last_update", "customer", "inventory", "staff_staff_store_idTostore", "address", "staff_store_manager_staff_idTostaff"],
  StoreCreateManyInput: ["store_id", "manager_staff_id", "address_id", "last_update"],
  StoreUpdateManyMutationInput: ["last_update"],
  IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  Film_actorListRelationFilter: ["every", "some", "none"],
  Film_actorOrderByRelationAggregateInput: ["_count"],
  ActorCountOrderByAggregateInput: ["actor_id", "first_name", "last_name", "last_update"],
  ActorAvgOrderByAggregateInput: ["actor_id"],
  ActorMaxOrderByAggregateInput: ["actor_id", "first_name", "last_name", "last_update"],
  ActorMinOrderByAggregateInput: ["actor_id", "first_name", "last_name", "last_update"],
  ActorSumOrderByAggregateInput: ["actor_id"],
  IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  CityRelationFilter: ["is", "isNot"],
  CustomerListRelationFilter: ["every", "some", "none"],
  StaffListRelationFilter: ["every", "some", "none"],
  StoreListRelationFilter: ["every", "some", "none"],
  SortOrderInput: ["sort", "nulls"],
  CustomerOrderByRelationAggregateInput: ["_count"],
  StaffOrderByRelationAggregateInput: ["_count"],
  StoreOrderByRelationAggregateInput: ["_count"],
  AddressCountOrderByAggregateInput: ["address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update"],
  AddressAvgOrderByAggregateInput: ["address_id", "city_id"],
  AddressMaxOrderByAggregateInput: ["address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update"],
  AddressMinOrderByAggregateInput: ["address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update"],
  AddressSumOrderByAggregateInput: ["address_id", "city_id"],
  StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  Film_categoryListRelationFilter: ["every", "some", "none"],
  Film_categoryOrderByRelationAggregateInput: ["_count"],
  CategoryCountOrderByAggregateInput: ["category_id", "name", "last_update"],
  CategoryAvgOrderByAggregateInput: ["category_id"],
  CategoryMaxOrderByAggregateInput: ["category_id", "name", "last_update"],
  CategoryMinOrderByAggregateInput: ["category_id", "name", "last_update"],
  CategorySumOrderByAggregateInput: ["category_id"],
  AddressListRelationFilter: ["every", "some", "none"],
  CountryRelationFilter: ["is", "isNot"],
  AddressOrderByRelationAggregateInput: ["_count"],
  CityCountOrderByAggregateInput: ["city_id", "city", "country_id", "last_update"],
  CityAvgOrderByAggregateInput: ["city_id", "country_id"],
  CityMaxOrderByAggregateInput: ["city_id", "city", "country_id", "last_update"],
  CityMinOrderByAggregateInput: ["city_id", "city", "country_id", "last_update"],
  CitySumOrderByAggregateInput: ["city_id", "country_id"],
  CityListRelationFilter: ["every", "some", "none"],
  CityOrderByRelationAggregateInput: ["_count"],
  CountryCountOrderByAggregateInput: ["country_id", "country", "last_update"],
  CountryAvgOrderByAggregateInput: ["country_id"],
  CountryMaxOrderByAggregateInput: ["country_id", "country", "last_update"],
  CountryMinOrderByAggregateInput: ["country_id", "country", "last_update"],
  CountrySumOrderByAggregateInput: ["country_id"],
  BoolFilter: ["equals", "not"],
  DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  AddressRelationFilter: ["is", "isNot"],
  StoreRelationFilter: ["is", "isNot"],
  PaymentListRelationFilter: ["every", "some", "none"],
  RentalListRelationFilter: ["every", "some", "none"],
  PaymentOrderByRelationAggregateInput: ["_count"],
  RentalOrderByRelationAggregateInput: ["_count"],
  CustomerCountOrderByAggregateInput: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"],
  CustomerAvgOrderByAggregateInput: ["customer_id", "store_id", "address_id"],
  CustomerMaxOrderByAggregateInput: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"],
  CustomerMinOrderByAggregateInput: ["customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"],
  CustomerSumOrderByAggregateInput: ["customer_id", "store_id", "address_id"],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  DecimalFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  Enumfilm_ratingNullableFilter: ["equals", "in", "notIn", "not"],
  LanguageRelationFilter: ["is", "isNot"],
  LanguageNullableRelationFilter: ["is", "isNot"],
  InventoryListRelationFilter: ["every", "some", "none"],
  InventoryOrderByRelationAggregateInput: ["_count"],
  FilmCountOrderByAggregateInput: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  FilmAvgOrderByAggregateInput: ["film_id", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost"],
  FilmMaxOrderByAggregateInput: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  FilmMinOrderByAggregateInput: ["film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  FilmSumOrderByAggregateInput: ["film_id", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost"],
  IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  DecimalWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  Enumfilm_ratingNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  ActorRelationFilter: ["is", "isNot"],
  FilmRelationFilter: ["is", "isNot"],
  film_actorActor_idFilm_idCompoundUniqueInput: ["actor_id", "film_id"],
  Film_actorCountOrderByAggregateInput: ["actor_id", "film_id", "last_update"],
  Film_actorAvgOrderByAggregateInput: ["actor_id", "film_id"],
  Film_actorMaxOrderByAggregateInput: ["actor_id", "film_id", "last_update"],
  Film_actorMinOrderByAggregateInput: ["actor_id", "film_id", "last_update"],
  Film_actorSumOrderByAggregateInput: ["actor_id", "film_id"],
  CategoryRelationFilter: ["is", "isNot"],
  film_categoryFilm_idCategory_idCompoundUniqueInput: ["film_id", "category_id"],
  Film_categoryCountOrderByAggregateInput: ["film_id", "category_id", "last_update"],
  Film_categoryAvgOrderByAggregateInput: ["film_id", "category_id"],
  Film_categoryMaxOrderByAggregateInput: ["film_id", "category_id", "last_update"],
  Film_categoryMinOrderByAggregateInput: ["film_id", "category_id", "last_update"],
  Film_categorySumOrderByAggregateInput: ["film_id", "category_id"],
  Film_textCountOrderByAggregateInput: ["film_id", "title", "description"],
  Film_textAvgOrderByAggregateInput: ["film_id"],
  Film_textMaxOrderByAggregateInput: ["film_id", "title", "description"],
  Film_textMinOrderByAggregateInput: ["film_id", "title", "description"],
  Film_textSumOrderByAggregateInput: ["film_id"],
  InventoryCountOrderByAggregateInput: ["inventory_id", "film_id", "store_id", "last_update"],
  InventoryAvgOrderByAggregateInput: ["inventory_id", "film_id", "store_id"],
  InventoryMaxOrderByAggregateInput: ["inventory_id", "film_id", "store_id", "last_update"],
  InventoryMinOrderByAggregateInput: ["inventory_id", "film_id", "store_id", "last_update"],
  InventorySumOrderByAggregateInput: ["inventory_id", "film_id", "store_id"],
  FilmListRelationFilter: ["every", "some", "none"],
  FilmOrderByRelationAggregateInput: ["_count"],
  LanguageCountOrderByAggregateInput: ["language_id", "name", "last_update"],
  LanguageAvgOrderByAggregateInput: ["language_id"],
  LanguageMaxOrderByAggregateInput: ["language_id", "name", "last_update"],
  LanguageMinOrderByAggregateInput: ["language_id", "name", "last_update"],
  LanguageSumOrderByAggregateInput: ["language_id"],
  CustomerRelationFilter: ["is", "isNot"],
  RentalNullableRelationFilter: ["is", "isNot"],
  StaffRelationFilter: ["is", "isNot"],
  PaymentCountOrderByAggregateInput: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update"],
  PaymentAvgOrderByAggregateInput: ["payment_id", "customer_id", "staff_id", "rental_id", "amount"],
  PaymentMaxOrderByAggregateInput: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update"],
  PaymentMinOrderByAggregateInput: ["payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update"],
  PaymentSumOrderByAggregateInput: ["payment_id", "customer_id", "staff_id", "rental_id", "amount"],
  InventoryRelationFilter: ["is", "isNot"],
  rentalRental_dateInventory_idCustomer_idCompoundUniqueInput: ["rental_date", "inventory_id", "customer_id"],
  RentalCountOrderByAggregateInput: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"],
  RentalAvgOrderByAggregateInput: ["rental_id", "inventory_id", "customer_id", "staff_id"],
  RentalMaxOrderByAggregateInput: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"],
  RentalMinOrderByAggregateInput: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"],
  RentalSumOrderByAggregateInput: ["rental_id", "inventory_id", "customer_id", "staff_id"],
  BytesNullableFilter: ["equals", "in", "notIn", "not"],
  StoreNullableRelationFilter: ["is", "isNot"],
  StaffCountOrderByAggregateInput: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"],
  StaffAvgOrderByAggregateInput: ["staff_id", "address_id", "store_id"],
  StaffMaxOrderByAggregateInput: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"],
  StaffMinOrderByAggregateInput: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"],
  StaffSumOrderByAggregateInput: ["staff_id", "address_id", "store_id"],
  BytesNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  StoreCountOrderByAggregateInput: ["store_id", "manager_staff_id", "address_id", "last_update"],
  StoreAvgOrderByAggregateInput: ["store_id", "manager_staff_id", "address_id"],
  StoreMaxOrderByAggregateInput: ["store_id", "manager_staff_id", "address_id", "last_update"],
  StoreMinOrderByAggregateInput: ["store_id", "manager_staff_id", "address_id", "last_update"],
  StoreSumOrderByAggregateInput: ["store_id", "manager_staff_id", "address_id"],
  Film_actorCreateNestedManyWithoutActorInput: ["create", "connectOrCreate", "createMany", "connect"],
  StringFieldUpdateOperationsInput: ["set"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  Film_actorUpdateManyWithoutActorNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  NullableStringFieldUpdateOperationsInput: ["set"],
  CityUpdateOneRequiredWithoutAddressNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  CustomerUpdateManyWithoutAddressNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  StaffUpdateManyWithoutAddressNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  StoreUpdateManyWithoutAddressNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  Film_categoryCreateNestedManyWithoutCategoryInput: ["create", "connectOrCreate", "createMany", "connect"],
  Film_categoryUpdateManyWithoutCategoryNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AddressCreateNestedManyWithoutCityInput: ["connect"],
  CountryCreateNestedOneWithoutCityInput: ["create", "connectOrCreate", "connect"],
  AddressUpdateManyWithoutCityNestedInput: ["set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  CountryUpdateOneRequiredWithoutCityNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  CityCreateNestedManyWithoutCountryInput: ["create", "connectOrCreate", "createMany", "connect"],
  CityUpdateManyWithoutCountryNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AddressCreateNestedOneWithoutCustomerInput: ["connect"],
  StoreCreateNestedOneWithoutCustomerInput: ["create", "connectOrCreate", "connect"],
  PaymentCreateNestedManyWithoutCustomerInput: ["create", "connectOrCreate", "createMany", "connect"],
  RentalCreateNestedManyWithoutCustomerInput: ["create", "connectOrCreate", "createMany", "connect"],
  BoolFieldUpdateOperationsInput: ["set"],
  NullableDateTimeFieldUpdateOperationsInput: ["set"],
  AddressUpdateOneRequiredWithoutCustomerNestedInput: ["connect", "update"],
  StoreUpdateOneRequiredWithoutCustomerNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  PaymentUpdateManyWithoutCustomerNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  RentalUpdateManyWithoutCustomerNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  LanguageCreateNestedOneWithoutFilm_film_language_idTolanguageInput: ["create", "connectOrCreate", "connect"],
  LanguageCreateNestedOneWithoutFilm_film_original_language_idTolanguageInput: ["create", "connectOrCreate", "connect"],
  Film_actorCreateNestedManyWithoutFilmInput: ["create", "connectOrCreate", "createMany", "connect"],
  Film_categoryCreateNestedManyWithoutFilmInput: ["create", "connectOrCreate", "createMany", "connect"],
  InventoryCreateNestedManyWithoutFilmInput: ["create", "connectOrCreate", "createMany", "connect"],
  NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  DecimalFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  NullableEnumfilm_ratingFieldUpdateOperationsInput: ["set"],
  LanguageUpdateOneRequiredWithoutFilm_film_language_idTolanguageNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  LanguageUpdateOneWithoutFilm_film_original_language_idTolanguageNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  Film_actorUpdateManyWithoutFilmNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  Film_categoryUpdateManyWithoutFilmNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  InventoryUpdateManyWithoutFilmNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ActorCreateNestedOneWithoutFilm_actorInput: ["create", "connectOrCreate", "connect"],
  FilmCreateNestedOneWithoutFilm_actorInput: ["create", "connectOrCreate", "connect"],
  ActorUpdateOneRequiredWithoutFilm_actorNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  FilmUpdateOneRequiredWithoutFilm_actorNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  CategoryCreateNestedOneWithoutFilm_categoryInput: ["create", "connectOrCreate", "connect"],
  FilmCreateNestedOneWithoutFilm_categoryInput: ["create", "connectOrCreate", "connect"],
  CategoryUpdateOneRequiredWithoutFilm_categoryNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  FilmUpdateOneRequiredWithoutFilm_categoryNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  FilmCreateNestedOneWithoutInventoryInput: ["create", "connectOrCreate", "connect"],
  StoreCreateNestedOneWithoutInventoryInput: ["create", "connectOrCreate", "connect"],
  RentalCreateNestedManyWithoutInventoryInput: ["create", "connectOrCreate", "createMany", "connect"],
  FilmUpdateOneRequiredWithoutInventoryNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  StoreUpdateOneRequiredWithoutInventoryNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  RentalUpdateManyWithoutInventoryNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FilmCreateNestedManyWithoutLanguage_film_language_idTolanguageInput: ["create", "connectOrCreate", "createMany", "connect"],
  FilmCreateNestedManyWithoutLanguage_film_original_language_idTolanguageInput: ["create", "connectOrCreate", "createMany", "connect"],
  FilmUpdateManyWithoutLanguage_film_language_idTolanguageNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FilmUpdateManyWithoutLanguage_film_original_language_idTolanguageNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  CustomerCreateNestedOneWithoutPaymentInput: ["create", "connectOrCreate", "connect"],
  RentalCreateNestedOneWithoutPaymentInput: ["create", "connectOrCreate", "connect"],
  StaffCreateNestedOneWithoutPaymentInput: ["create", "connectOrCreate", "connect"],
  CustomerUpdateOneRequiredWithoutPaymentNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  RentalUpdateOneWithoutPaymentNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  StaffUpdateOneRequiredWithoutPaymentNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  PaymentCreateNestedManyWithoutRentalInput: ["create", "connectOrCreate", "createMany", "connect"],
  CustomerCreateNestedOneWithoutRentalInput: ["create", "connectOrCreate", "connect"],
  InventoryCreateNestedOneWithoutRentalInput: ["create", "connectOrCreate", "connect"],
  StaffCreateNestedOneWithoutRentalInput: ["create", "connectOrCreate", "connect"],
  PaymentUpdateManyWithoutRentalNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  CustomerUpdateOneRequiredWithoutRentalNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  InventoryUpdateOneRequiredWithoutRentalNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  StaffUpdateOneRequiredWithoutRentalNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  PaymentCreateNestedManyWithoutStaffInput: ["create", "connectOrCreate", "createMany", "connect"],
  RentalCreateNestedManyWithoutStaffInput: ["create", "connectOrCreate", "createMany", "connect"],
  AddressCreateNestedOneWithoutStaffInput: ["connect"],
  StoreCreateNestedOneWithoutStaff_staff_store_idTostoreInput: ["create", "connectOrCreate", "connect"],
  StoreCreateNestedOneWithoutStaff_store_manager_staff_idTostaffInput: ["create", "connectOrCreate", "connect"],
  NullableBytesFieldUpdateOperationsInput: ["set"],
  PaymentUpdateManyWithoutStaffNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  RentalUpdateManyWithoutStaffNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AddressUpdateOneRequiredWithoutStaffNestedInput: ["connect", "update"],
  StoreUpdateOneRequiredWithoutStaff_staff_store_idTostoreNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  StoreUpdateOneWithoutStaff_store_manager_staff_idTostaffNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  CustomerCreateNestedManyWithoutStoreInput: ["create", "connectOrCreate", "createMany", "connect"],
  InventoryCreateNestedManyWithoutStoreInput: ["create", "connectOrCreate", "createMany", "connect"],
  StaffCreateNestedManyWithoutStore_staff_store_idTostoreInput: ["create", "connectOrCreate", "createMany", "connect"],
  AddressCreateNestedOneWithoutStoreInput: ["connect"],
  StaffCreateNestedOneWithoutStore_store_manager_staff_idTostaffInput: ["create", "connectOrCreate", "connect"],
  CustomerUpdateManyWithoutStoreNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  InventoryUpdateManyWithoutStoreNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  StaffUpdateManyWithoutStore_staff_store_idTostoreNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AddressUpdateOneRequiredWithoutStoreNestedInput: ["connect", "update"],
  StaffUpdateOneRequiredWithoutStore_store_manager_staff_idTostaffNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
  NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
  NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBoolFilter: ["equals", "not"],
  NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedDecimalFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedEnumfilm_ratingNullableFilter: ["equals", "in", "notIn", "not"],
  NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDecimalWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedEnumfilm_ratingNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedBytesNullableFilter: ["equals", "in", "notIn", "not"],
  NestedBytesNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  Film_actorCreateWithoutActorInput: ["last_update", "film"],
  Film_actorCreateOrConnectWithoutActorInput: ["where", "create"],
  Film_actorCreateManyActorInputEnvelope: ["data", "skipDuplicates"],
  Film_actorUpsertWithWhereUniqueWithoutActorInput: ["where", "update", "create"],
  Film_actorUpdateWithWhereUniqueWithoutActorInput: ["where", "data"],
  Film_actorUpdateManyWithWhereWithoutActorInput: ["where", "data"],
  Film_actorScalarWhereInput: ["AND", "OR", "NOT", "actor_id", "film_id", "last_update"],
  CityCreateWithoutAddressInput: ["city", "last_update", "country"],
  CityCreateOrConnectWithoutAddressInput: ["where", "create"],
  CityUpsertWithoutAddressInput: ["update", "create", "where"],
  CityUpdateToOneWithWhereWithoutAddressInput: ["where", "data"],
  CityUpdateWithoutAddressInput: ["city", "last_update", "country"],
  CustomerCreateWithoutAddressInput: ["first_name", "last_name", "email", "active", "create_date", "last_update", "store", "payment", "rental"],
  CustomerCreateOrConnectWithoutAddressInput: ["where", "create"],
  CustomerUpsertWithWhereUniqueWithoutAddressInput: ["where", "update", "create"],
  CustomerCreateManyAddressInputEnvelope: ["data", "skipDuplicates"],
  CustomerUpdateWithWhereUniqueWithoutAddressInput: ["where", "data"],
  CustomerUpdateManyWithWhereWithoutAddressInput: ["where", "data"],
  CustomerScalarWhereInput: ["AND", "OR", "NOT", "customer_id", "store_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"],
  StaffCreateWithoutAddressInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "payment", "rental", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  StaffCreateOrConnectWithoutAddressInput: ["where", "create"],
  StaffUpsertWithWhereUniqueWithoutAddressInput: ["where", "update", "create"],
  StaffCreateManyAddressInputEnvelope: ["data", "skipDuplicates"],
  StaffUpdateWithWhereUniqueWithoutAddressInput: ["where", "data"],
  StaffUpdateManyWithWhereWithoutAddressInput: ["where", "data"],
  StaffScalarWhereInput: ["AND", "OR", "NOT", "staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"],
  StoreCreateWithoutAddressInput: ["last_update", "customer", "inventory", "staff_staff_store_idTostore", "staff_store_manager_staff_idTostaff"],
  StoreCreateOrConnectWithoutAddressInput: ["where", "create"],
  StoreUpsertWithWhereUniqueWithoutAddressInput: ["where", "update", "create"],
  StoreCreateManyAddressInputEnvelope: ["data", "skipDuplicates"],
  StoreUpdateWithWhereUniqueWithoutAddressInput: ["where", "data"],
  StoreUpdateManyWithWhereWithoutAddressInput: ["where", "data"],
  StoreScalarWhereInput: ["AND", "OR", "NOT", "store_id", "manager_staff_id", "address_id", "last_update"],
  Film_categoryCreateWithoutCategoryInput: ["last_update", "film"],
  Film_categoryCreateOrConnectWithoutCategoryInput: ["where", "create"],
  Film_categoryCreateManyCategoryInputEnvelope: ["data", "skipDuplicates"],
  Film_categoryUpsertWithWhereUniqueWithoutCategoryInput: ["where", "update", "create"],
  Film_categoryUpdateWithWhereUniqueWithoutCategoryInput: ["where", "data"],
  Film_categoryUpdateManyWithWhereWithoutCategoryInput: ["where", "data"],
  Film_categoryScalarWhereInput: ["AND", "OR", "NOT", "film_id", "category_id", "last_update"],
  CountryCreateWithoutCityInput: ["country", "last_update"],
  CountryCreateOrConnectWithoutCityInput: ["where", "create"],
  AddressUpdateWithWhereUniqueWithoutCityInput: ["where", "data"],
  AddressUpdateManyWithWhereWithoutCityInput: ["where", "data"],
  AddressScalarWhereInput: ["AND", "OR", "NOT", "address_id", "address", "address2", "district", "city_id", "postal_code", "phone", "last_update"],
  CountryUpsertWithoutCityInput: ["update", "create", "where"],
  CountryUpdateToOneWithWhereWithoutCityInput: ["where", "data"],
  CountryUpdateWithoutCityInput: ["country", "last_update"],
  CityCreateWithoutCountryInput: ["city", "last_update", "address"],
  CityCreateOrConnectWithoutCountryInput: ["where", "create"],
  CityCreateManyCountryInputEnvelope: ["data", "skipDuplicates"],
  CityUpsertWithWhereUniqueWithoutCountryInput: ["where", "update", "create"],
  CityUpdateWithWhereUniqueWithoutCountryInput: ["where", "data"],
  CityUpdateManyWithWhereWithoutCountryInput: ["where", "data"],
  CityScalarWhereInput: ["AND", "OR", "NOT", "city_id", "city", "country_id", "last_update"],
  StoreCreateWithoutCustomerInput: ["last_update", "inventory", "staff_staff_store_idTostore", "address", "staff_store_manager_staff_idTostaff"],
  StoreCreateOrConnectWithoutCustomerInput: ["where", "create"],
  PaymentCreateWithoutCustomerInput: ["amount", "payment_date", "last_update", "rental", "staff"],
  PaymentCreateOrConnectWithoutCustomerInput: ["where", "create"],
  PaymentCreateManyCustomerInputEnvelope: ["data", "skipDuplicates"],
  RentalCreateWithoutCustomerInput: ["rental_date", "return_date", "last_update", "payment", "inventory", "staff"],
  RentalCreateOrConnectWithoutCustomerInput: ["where", "create"],
  RentalCreateManyCustomerInputEnvelope: ["data", "skipDuplicates"],
  AddressUpdateToOneWithWhereWithoutCustomerInput: ["where", "data"],
  AddressUpdateWithoutCustomerInput: ["address", "address2", "district", "postal_code", "phone", "last_update", "city", "staff", "store"],
  StoreUpsertWithoutCustomerInput: ["update", "create", "where"],
  StoreUpdateToOneWithWhereWithoutCustomerInput: ["where", "data"],
  StoreUpdateWithoutCustomerInput: ["last_update", "inventory", "staff_staff_store_idTostore", "address", "staff_store_manager_staff_idTostaff"],
  PaymentUpsertWithWhereUniqueWithoutCustomerInput: ["where", "update", "create"],
  PaymentUpdateWithWhereUniqueWithoutCustomerInput: ["where", "data"],
  PaymentUpdateManyWithWhereWithoutCustomerInput: ["where", "data"],
  PaymentScalarWhereInput: ["AND", "OR", "NOT", "payment_id", "customer_id", "staff_id", "rental_id", "amount", "payment_date", "last_update"],
  RentalUpsertWithWhereUniqueWithoutCustomerInput: ["where", "update", "create"],
  RentalUpdateWithWhereUniqueWithoutCustomerInput: ["where", "data"],
  RentalUpdateManyWithWhereWithoutCustomerInput: ["where", "data"],
  RentalScalarWhereInput: ["AND", "OR", "NOT", "rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "staff_id", "last_update"],
  LanguageCreateWithoutFilm_film_language_idTolanguageInput: ["name", "last_update", "film_film_original_language_idTolanguage"],
  LanguageCreateOrConnectWithoutFilm_film_language_idTolanguageInput: ["where", "create"],
  LanguageCreateWithoutFilm_film_original_language_idTolanguageInput: ["name", "last_update", "film_film_language_idTolanguage"],
  LanguageCreateOrConnectWithoutFilm_film_original_language_idTolanguageInput: ["where", "create"],
  Film_actorCreateWithoutFilmInput: ["last_update", "actor"],
  Film_actorCreateOrConnectWithoutFilmInput: ["where", "create"],
  Film_actorCreateManyFilmInputEnvelope: ["data", "skipDuplicates"],
  Film_categoryCreateWithoutFilmInput: ["last_update", "category"],
  Film_categoryCreateOrConnectWithoutFilmInput: ["where", "create"],
  Film_categoryCreateManyFilmInputEnvelope: ["data", "skipDuplicates"],
  InventoryCreateWithoutFilmInput: ["last_update", "store", "rental"],
  InventoryCreateOrConnectWithoutFilmInput: ["where", "create"],
  InventoryCreateManyFilmInputEnvelope: ["data", "skipDuplicates"],
  LanguageUpsertWithoutFilm_film_language_idTolanguageInput: ["update", "create", "where"],
  LanguageUpdateToOneWithWhereWithoutFilm_film_language_idTolanguageInput: ["where", "data"],
  LanguageUpdateWithoutFilm_film_language_idTolanguageInput: ["name", "last_update", "film_film_original_language_idTolanguage"],
  LanguageUpsertWithoutFilm_film_original_language_idTolanguageInput: ["update", "create", "where"],
  LanguageUpdateToOneWithWhereWithoutFilm_film_original_language_idTolanguageInput: ["where", "data"],
  LanguageUpdateWithoutFilm_film_original_language_idTolanguageInput: ["name", "last_update", "film_film_language_idTolanguage"],
  Film_actorUpsertWithWhereUniqueWithoutFilmInput: ["where", "update", "create"],
  Film_actorUpdateWithWhereUniqueWithoutFilmInput: ["where", "data"],
  Film_actorUpdateManyWithWhereWithoutFilmInput: ["where", "data"],
  Film_categoryUpsertWithWhereUniqueWithoutFilmInput: ["where", "update", "create"],
  Film_categoryUpdateWithWhereUniqueWithoutFilmInput: ["where", "data"],
  Film_categoryUpdateManyWithWhereWithoutFilmInput: ["where", "data"],
  InventoryUpsertWithWhereUniqueWithoutFilmInput: ["where", "update", "create"],
  InventoryUpdateWithWhereUniqueWithoutFilmInput: ["where", "data"],
  InventoryUpdateManyWithWhereWithoutFilmInput: ["where", "data"],
  InventoryScalarWhereInput: ["AND", "OR", "NOT", "inventory_id", "film_id", "store_id", "last_update"],
  ActorCreateWithoutFilm_actorInput: ["first_name", "last_name", "last_update"],
  ActorCreateOrConnectWithoutFilm_actorInput: ["where", "create"],
  FilmCreateWithoutFilm_actorInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_category", "inventory"],
  FilmCreateOrConnectWithoutFilm_actorInput: ["where", "create"],
  ActorUpsertWithoutFilm_actorInput: ["update", "create", "where"],
  ActorUpdateToOneWithWhereWithoutFilm_actorInput: ["where", "data"],
  ActorUpdateWithoutFilm_actorInput: ["first_name", "last_name", "last_update"],
  FilmUpsertWithoutFilm_actorInput: ["update", "create", "where"],
  FilmUpdateToOneWithWhereWithoutFilm_actorInput: ["where", "data"],
  FilmUpdateWithoutFilm_actorInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_category", "inventory"],
  CategoryCreateWithoutFilm_categoryInput: ["name", "last_update"],
  CategoryCreateOrConnectWithoutFilm_categoryInput: ["where", "create"],
  FilmCreateWithoutFilm_categoryInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_actor", "inventory"],
  FilmCreateOrConnectWithoutFilm_categoryInput: ["where", "create"],
  CategoryUpsertWithoutFilm_categoryInput: ["update", "create", "where"],
  CategoryUpdateToOneWithWhereWithoutFilm_categoryInput: ["where", "data"],
  CategoryUpdateWithoutFilm_categoryInput: ["name", "last_update"],
  FilmUpsertWithoutFilm_categoryInput: ["update", "create", "where"],
  FilmUpdateToOneWithWhereWithoutFilm_categoryInput: ["where", "data"],
  FilmUpdateWithoutFilm_categoryInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_actor", "inventory"],
  FilmCreateWithoutInventoryInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_actor", "film_category"],
  FilmCreateOrConnectWithoutInventoryInput: ["where", "create"],
  StoreCreateWithoutInventoryInput: ["last_update", "customer", "staff_staff_store_idTostore", "address", "staff_store_manager_staff_idTostaff"],
  StoreCreateOrConnectWithoutInventoryInput: ["where", "create"],
  RentalCreateWithoutInventoryInput: ["rental_date", "return_date", "last_update", "payment", "customer", "staff"],
  RentalCreateOrConnectWithoutInventoryInput: ["where", "create"],
  RentalCreateManyInventoryInputEnvelope: ["data", "skipDuplicates"],
  FilmUpsertWithoutInventoryInput: ["update", "create", "where"],
  FilmUpdateToOneWithWhereWithoutInventoryInput: ["where", "data"],
  FilmUpdateWithoutInventoryInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "language_film_original_language_idTolanguage", "film_actor", "film_category"],
  StoreUpsertWithoutInventoryInput: ["update", "create", "where"],
  StoreUpdateToOneWithWhereWithoutInventoryInput: ["where", "data"],
  StoreUpdateWithoutInventoryInput: ["last_update", "customer", "staff_staff_store_idTostore", "address", "staff_store_manager_staff_idTostaff"],
  RentalUpsertWithWhereUniqueWithoutInventoryInput: ["where", "update", "create"],
  RentalUpdateWithWhereUniqueWithoutInventoryInput: ["where", "data"],
  RentalUpdateManyWithWhereWithoutInventoryInput: ["where", "data"],
  FilmCreateWithoutLanguage_film_language_idTolanguageInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_original_language_idTolanguage", "film_actor", "film_category", "inventory"],
  FilmCreateOrConnectWithoutLanguage_film_language_idTolanguageInput: ["where", "create"],
  FilmCreateManyLanguage_film_language_idTolanguageInputEnvelope: ["data", "skipDuplicates"],
  FilmCreateWithoutLanguage_film_original_language_idTolanguageInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "film_actor", "film_category", "inventory"],
  FilmCreateOrConnectWithoutLanguage_film_original_language_idTolanguageInput: ["where", "create"],
  FilmCreateManyLanguage_film_original_language_idTolanguageInputEnvelope: ["data", "skipDuplicates"],
  FilmUpsertWithWhereUniqueWithoutLanguage_film_language_idTolanguageInput: ["where", "update", "create"],
  FilmUpdateWithWhereUniqueWithoutLanguage_film_language_idTolanguageInput: ["where", "data"],
  FilmUpdateManyWithWhereWithoutLanguage_film_language_idTolanguageInput: ["where", "data"],
  FilmScalarWhereInput: ["AND", "OR", "NOT", "film_id", "title", "description", "release_year", "language_id", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  FilmUpsertWithWhereUniqueWithoutLanguage_film_original_language_idTolanguageInput: ["where", "update", "create"],
  FilmUpdateWithWhereUniqueWithoutLanguage_film_original_language_idTolanguageInput: ["where", "data"],
  FilmUpdateManyWithWhereWithoutLanguage_film_original_language_idTolanguageInput: ["where", "data"],
  CustomerCreateWithoutPaymentInput: ["first_name", "last_name", "email", "active", "create_date", "last_update", "address", "store", "rental"],
  CustomerCreateOrConnectWithoutPaymentInput: ["where", "create"],
  RentalCreateWithoutPaymentInput: ["rental_date", "return_date", "last_update", "customer", "inventory", "staff"],
  RentalCreateOrConnectWithoutPaymentInput: ["where", "create"],
  StaffCreateWithoutPaymentInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "rental", "address", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  StaffCreateOrConnectWithoutPaymentInput: ["where", "create"],
  CustomerUpsertWithoutPaymentInput: ["update", "create", "where"],
  CustomerUpdateToOneWithWhereWithoutPaymentInput: ["where", "data"],
  CustomerUpdateWithoutPaymentInput: ["first_name", "last_name", "email", "active", "create_date", "last_update", "address", "store", "rental"],
  RentalUpsertWithoutPaymentInput: ["update", "create", "where"],
  RentalUpdateToOneWithWhereWithoutPaymentInput: ["where", "data"],
  RentalUpdateWithoutPaymentInput: ["rental_date", "return_date", "last_update", "customer", "inventory", "staff"],
  StaffUpsertWithoutPaymentInput: ["update", "create", "where"],
  StaffUpdateToOneWithWhereWithoutPaymentInput: ["where", "data"],
  StaffUpdateWithoutPaymentInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "rental", "address", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  PaymentCreateWithoutRentalInput: ["amount", "payment_date", "last_update", "customer", "staff"],
  PaymentCreateOrConnectWithoutRentalInput: ["where", "create"],
  PaymentCreateManyRentalInputEnvelope: ["data", "skipDuplicates"],
  CustomerCreateWithoutRentalInput: ["first_name", "last_name", "email", "active", "create_date", "last_update", "address", "store", "payment"],
  CustomerCreateOrConnectWithoutRentalInput: ["where", "create"],
  InventoryCreateWithoutRentalInput: ["last_update", "film", "store"],
  InventoryCreateOrConnectWithoutRentalInput: ["where", "create"],
  StaffCreateWithoutRentalInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "payment", "address", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  StaffCreateOrConnectWithoutRentalInput: ["where", "create"],
  PaymentUpsertWithWhereUniqueWithoutRentalInput: ["where", "update", "create"],
  PaymentUpdateWithWhereUniqueWithoutRentalInput: ["where", "data"],
  PaymentUpdateManyWithWhereWithoutRentalInput: ["where", "data"],
  CustomerUpsertWithoutRentalInput: ["update", "create", "where"],
  CustomerUpdateToOneWithWhereWithoutRentalInput: ["where", "data"],
  CustomerUpdateWithoutRentalInput: ["first_name", "last_name", "email", "active", "create_date", "last_update", "address", "store", "payment"],
  InventoryUpsertWithoutRentalInput: ["update", "create", "where"],
  InventoryUpdateToOneWithWhereWithoutRentalInput: ["where", "data"],
  InventoryUpdateWithoutRentalInput: ["last_update", "film", "store"],
  StaffUpsertWithoutRentalInput: ["update", "create", "where"],
  StaffUpdateToOneWithWhereWithoutRentalInput: ["where", "data"],
  StaffUpdateWithoutRentalInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "payment", "address", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  PaymentCreateWithoutStaffInput: ["amount", "payment_date", "last_update", "customer", "rental"],
  PaymentCreateOrConnectWithoutStaffInput: ["where", "create"],
  PaymentCreateManyStaffInputEnvelope: ["data", "skipDuplicates"],
  RentalCreateWithoutStaffInput: ["rental_date", "return_date", "last_update", "payment", "customer", "inventory"],
  RentalCreateOrConnectWithoutStaffInput: ["where", "create"],
  RentalCreateManyStaffInputEnvelope: ["data", "skipDuplicates"],
  StoreCreateWithoutStaff_staff_store_idTostoreInput: ["last_update", "customer", "inventory", "address", "staff_store_manager_staff_idTostaff"],
  StoreCreateOrConnectWithoutStaff_staff_store_idTostoreInput: ["where", "create"],
  StoreCreateWithoutStaff_store_manager_staff_idTostaffInput: ["last_update", "customer", "inventory", "staff_staff_store_idTostore", "address"],
  StoreCreateOrConnectWithoutStaff_store_manager_staff_idTostaffInput: ["where", "create"],
  PaymentUpsertWithWhereUniqueWithoutStaffInput: ["where", "update", "create"],
  PaymentUpdateWithWhereUniqueWithoutStaffInput: ["where", "data"],
  PaymentUpdateManyWithWhereWithoutStaffInput: ["where", "data"],
  RentalUpsertWithWhereUniqueWithoutStaffInput: ["where", "update", "create"],
  RentalUpdateWithWhereUniqueWithoutStaffInput: ["where", "data"],
  RentalUpdateManyWithWhereWithoutStaffInput: ["where", "data"],
  AddressUpdateToOneWithWhereWithoutStaffInput: ["where", "data"],
  AddressUpdateWithoutStaffInput: ["address", "address2", "district", "postal_code", "phone", "last_update", "city", "customer", "store"],
  StoreUpsertWithoutStaff_staff_store_idTostoreInput: ["update", "create", "where"],
  StoreUpdateToOneWithWhereWithoutStaff_staff_store_idTostoreInput: ["where", "data"],
  StoreUpdateWithoutStaff_staff_store_idTostoreInput: ["last_update", "customer", "inventory", "address", "staff_store_manager_staff_idTostaff"],
  StoreUpsertWithoutStaff_store_manager_staff_idTostaffInput: ["update", "create", "where"],
  StoreUpdateToOneWithWhereWithoutStaff_store_manager_staff_idTostaffInput: ["where", "data"],
  StoreUpdateWithoutStaff_store_manager_staff_idTostaffInput: ["last_update", "customer", "inventory", "staff_staff_store_idTostore", "address"],
  CustomerCreateWithoutStoreInput: ["first_name", "last_name", "email", "active", "create_date", "last_update", "address", "payment", "rental"],
  CustomerCreateOrConnectWithoutStoreInput: ["where", "create"],
  CustomerCreateManyStoreInputEnvelope: ["data", "skipDuplicates"],
  InventoryCreateWithoutStoreInput: ["last_update", "film", "rental"],
  InventoryCreateOrConnectWithoutStoreInput: ["where", "create"],
  InventoryCreateManyStoreInputEnvelope: ["data", "skipDuplicates"],
  StaffCreateWithoutStore_staff_store_idTostoreInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "payment", "rental", "address", "store_store_manager_staff_idTostaff"],
  StaffCreateOrConnectWithoutStore_staff_store_idTostoreInput: ["where", "create"],
  StaffCreateManyStore_staff_store_idTostoreInputEnvelope: ["data", "skipDuplicates"],
  StaffCreateWithoutStore_store_manager_staff_idTostaffInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "payment", "rental", "address", "store_staff_store_idTostore"],
  StaffCreateOrConnectWithoutStore_store_manager_staff_idTostaffInput: ["where", "create"],
  CustomerUpsertWithWhereUniqueWithoutStoreInput: ["where", "update", "create"],
  CustomerUpdateWithWhereUniqueWithoutStoreInput: ["where", "data"],
  CustomerUpdateManyWithWhereWithoutStoreInput: ["where", "data"],
  InventoryUpsertWithWhereUniqueWithoutStoreInput: ["where", "update", "create"],
  InventoryUpdateWithWhereUniqueWithoutStoreInput: ["where", "data"],
  InventoryUpdateManyWithWhereWithoutStoreInput: ["where", "data"],
  StaffUpsertWithWhereUniqueWithoutStore_staff_store_idTostoreInput: ["where", "update", "create"],
  StaffUpdateWithWhereUniqueWithoutStore_staff_store_idTostoreInput: ["where", "data"],
  StaffUpdateManyWithWhereWithoutStore_staff_store_idTostoreInput: ["where", "data"],
  AddressUpdateToOneWithWhereWithoutStoreInput: ["where", "data"],
  AddressUpdateWithoutStoreInput: ["address", "address2", "district", "postal_code", "phone", "last_update", "city", "customer", "staff"],
  StaffUpsertWithoutStore_store_manager_staff_idTostaffInput: ["update", "create", "where"],
  StaffUpdateToOneWithWhereWithoutStore_store_manager_staff_idTostaffInput: ["where", "data"],
  StaffUpdateWithoutStore_store_manager_staff_idTostaffInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "payment", "rental", "address", "store_staff_store_idTostore"],
  Film_actorCreateManyActorInput: ["film_id", "last_update"],
  Film_actorUpdateWithoutActorInput: ["last_update", "film"],
  CustomerUpdateWithoutAddressInput: ["first_name", "last_name", "email", "active", "create_date", "last_update", "store", "payment", "rental"],
  CustomerCreateManyAddressInput: ["customer_id", "store_id", "first_name", "last_name", "email", "active", "create_date", "last_update"],
  StaffUpdateWithoutAddressInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "payment", "rental", "store_staff_store_idTostore", "store_store_manager_staff_idTostaff"],
  StaffCreateManyAddressInput: ["staff_id", "first_name", "last_name", "picture", "email", "store_id", "active", "username", "password", "last_update"],
  StoreUpdateWithoutAddressInput: ["last_update", "customer", "inventory", "staff_staff_store_idTostore", "staff_store_manager_staff_idTostaff"],
  StoreCreateManyAddressInput: ["store_id", "manager_staff_id", "last_update"],
  Film_categoryCreateManyCategoryInput: ["film_id", "last_update"],
  Film_categoryUpdateWithoutCategoryInput: ["last_update", "film"],
  AddressUpdateWithoutCityInput: ["address", "address2", "district", "postal_code", "phone", "last_update", "customer", "staff", "store"],
  CityCreateManyCountryInput: ["city_id", "city", "last_update"],
  CityUpdateWithoutCountryInput: ["city", "last_update", "address"],
  PaymentCreateManyCustomerInput: ["payment_id", "staff_id", "rental_id", "amount", "payment_date", "last_update"],
  RentalCreateManyCustomerInput: ["rental_id", "rental_date", "inventory_id", "return_date", "staff_id", "last_update"],
  PaymentUpdateWithoutCustomerInput: ["amount", "payment_date", "last_update", "rental", "staff"],
  RentalUpdateWithoutCustomerInput: ["rental_date", "return_date", "last_update", "payment", "inventory", "staff"],
  Film_actorCreateManyFilmInput: ["actor_id", "last_update"],
  Film_categoryCreateManyFilmInput: ["category_id", "last_update"],
  InventoryCreateManyFilmInput: ["inventory_id", "store_id", "last_update"],
  Film_actorUpdateWithoutFilmInput: ["last_update", "actor"],
  Film_categoryUpdateWithoutFilmInput: ["last_update", "category"],
  InventoryUpdateWithoutFilmInput: ["last_update", "store", "rental"],
  RentalCreateManyInventoryInput: ["rental_id", "rental_date", "customer_id", "return_date", "staff_id", "last_update"],
  RentalUpdateWithoutInventoryInput: ["rental_date", "return_date", "last_update", "payment", "customer", "staff"],
  FilmCreateManyLanguage_film_language_idTolanguageInput: ["film_id", "title", "description", "release_year", "original_language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  FilmCreateManyLanguage_film_original_language_idTolanguageInput: ["film_id", "title", "description", "release_year", "language_id", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update"],
  FilmUpdateWithoutLanguage_film_language_idTolanguageInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_original_language_idTolanguage", "film_actor", "film_category", "inventory"],
  FilmUpdateWithoutLanguage_film_original_language_idTolanguageInput: ["title", "description", "release_year", "rental_duration", "rental_rate", "length", "replacement_cost", "rating", "special_features", "last_update", "language_film_language_idTolanguage", "film_actor", "film_category", "inventory"],
  PaymentCreateManyRentalInput: ["payment_id", "customer_id", "staff_id", "amount", "payment_date", "last_update"],
  PaymentUpdateWithoutRentalInput: ["amount", "payment_date", "last_update", "customer", "staff"],
  PaymentCreateManyStaffInput: ["payment_id", "customer_id", "rental_id", "amount", "payment_date", "last_update"],
  RentalCreateManyStaffInput: ["rental_id", "rental_date", "inventory_id", "customer_id", "return_date", "last_update"],
  PaymentUpdateWithoutStaffInput: ["amount", "payment_date", "last_update", "customer", "rental"],
  RentalUpdateWithoutStaffInput: ["rental_date", "return_date", "last_update", "payment", "customer", "inventory"],
  CustomerCreateManyStoreInput: ["customer_id", "first_name", "last_name", "email", "address_id", "active", "create_date", "last_update"],
  InventoryCreateManyStoreInput: ["inventory_id", "film_id", "last_update"],
  StaffCreateManyStore_staff_store_idTostoreInput: ["staff_id", "first_name", "last_name", "address_id", "picture", "email", "active", "username", "password", "last_update"],
  CustomerUpdateWithoutStoreInput: ["first_name", "last_name", "email", "active", "create_date", "last_update", "address", "payment", "rental"],
  InventoryUpdateWithoutStoreInput: ["last_update", "film", "rental"],
  StaffUpdateWithoutStore_staff_store_idTostoreInput: ["first_name", "last_name", "picture", "email", "active", "username", "password", "last_update", "payment", "rental", "address", "store_store_manager_staff_idTostaff"]
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof typeof inputTypes[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<
  TInput extends InputTypesNames
> = FieldsConfig<InputTypeFieldNames<TInput>>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName = inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}

